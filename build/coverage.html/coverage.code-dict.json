{"/home/travis/build/npmtest/node-npmtest-cucumber/test.js":"/* istanbul instrument in package npmtest_cucumber */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cucumber/lib.npmtest_cucumber.js":"/* istanbul instrument in package npmtest_cucumber */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cucumber = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cucumber = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cucumber/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cucumber && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cucumber */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cucumber\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cucumber.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_cucumber.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cucumber.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_cucumber.__dirname +\n                    '/lib.npmtest_cucumber.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber.js":"function Cucumber(featureSource, supportCodeInitializer, options) {\n  var configuration = Cucumber.VolatileConfiguration(featureSource, supportCodeInitializer, options);\n  var runtime       = Cucumber.Runtime(configuration);\n  return runtime;\n}\n\nCucumber.Api                   = require('./cucumber/api');\nCucumber.Ast                   = require('./cucumber/ast');\nCucumber.Cli                   = require('./cucumber/cli');\nCucumber.Debug                 = require('./cucumber/debug'); // Untested namespace\nCucumber.Events                = require('./cucumber/events');\nCucumber.Listener              = require('./cucumber/listener');\nCucumber.Parser                = require('./cucumber/parser');\nCucumber.Runtime               = require('./cucumber/runtime');\nCucumber.Status                = require('./cucumber/status');\nCucumber.SupportCode           = require('./cucumber/support_code');\nCucumber.TagGroupParser        = require('./cucumber/tag_group_parser');\nCucumber.Type                  = require('./cucumber/type');\nCucumber.Util                  = require('./cucumber/util');\nCucumber.VolatileConfiguration = require('./cucumber/volatile_configuration');\n\nCucumber.VERSION               = require('../package.json').version;\n\nmodule.exports                 = Cucumber;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/api.js":"var Api        = {};\nApi.Scenario   = require('./api/scenario');\nmodule.exports = Api;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/api/scenario.js":"function Scenario(astScenario, scenarioResult) {\n  var Cucumber = require('../../cucumber');\n\n  var attachments = [];\n\n  function isStream(value) {\n    return value && typeof value === 'object' && typeof value.pipe === 'function';\n  }\n\n  function attachData(data, mimeType) {\n    var attachment = Cucumber.Runtime.Attachment({mimeType: mimeType, data: data});\n    attachments.push(attachment);\n  }\n\n  function attachStream(stream, mimeType, callback) {\n    var buffers = [];\n\n    stream.on('data', function (chunk) {\n      buffers.push(chunk);\n    });\n    stream.on('end', function () {\n      attachData(Buffer.concat(buffers), mimeType);\n      callback();\n    });\n  }\n\n  var self = {\n    getKeyword:     function getKeyword()     { return astScenario.getKeyword(); },\n    getName:        function getName()        { return astScenario.getName(); },\n    getDescription: function getDescription() { return astScenario.getDescription(); },\n    getUri:         function getUri()         { return astScenario.getUri(); },\n    getLine:        function getLine()        { return astScenario.getLine(); },\n    getTags:        function getTags()        { return astScenario.getTags(); },\n    isSuccessful:   function isSuccessful()   { return scenarioResult.getStatus() === Cucumber.Status.PASSED; },\n    isFailed:       function isFailed()       { return scenarioResult.getStatus() === Cucumber.Status.FAILED; },\n    isPending:      function isPending()      { return scenarioResult.getStatus() === Cucumber.Status.PENDING; },\n    isUndefined:    function isUndefined()    { return scenarioResult.getStatus() === Cucumber.Status.UNDEFINED; },\n    isSkipped:      function isSkipped()      { return scenarioResult.getStatus() === Cucumber.Status.SKIPPED; },\n    getException:   function getException()   { return scenarioResult.getFailureException(); },\n    getAttachments: function getAttachments() { return attachments; },\n    clearAttachments: function clearAttachments() { attachments = []; },\n\n    attach: function attach(data, mimeType, callback) {\n      if (isStream(data)) {\n        if (!mimeType)\n          throw Error(Scenario.ATTACH_MISSING_MIME_TYPE_ARGUMENT);\n        if (!callback)\n          throw Error(Scenario.ATTACH_MISSING_CALLBACK_ARGUMENT_FOR_STREAM_READABLE);\n\n        attachStream(data, mimeType, callback);\n      }\n      else if (Buffer && Buffer.isBuffer(data)) {\n        if (!mimeType)\n          throw Error(Scenario.ATTACH_MISSING_MIME_TYPE_ARGUMENT);\n\n        attachData(data, mimeType);\n        if (callback) callback();\n      }\n      else if (typeof(data) === 'string') {\n        if (!mimeType)\n          mimeType = Scenario.DEFAULT_TEXT_MIME_TYPE;\n\n        attachData(data, mimeType);\n        if (callback) callback();\n      } else {\n        throw Error(Scenario.ATTACH_INVALID_DATA_TYPE);\n      }\n    }\n  };\n\n  return self;\n}\n\nScenario.DEFAULT_TEXT_MIME_TYPE = 'text/plain';\nScenario.ATTACH_MISSING_MIME_TYPE_ARGUMENT = 'Cucumber.Api.Scenario.attach() expects a mimeType';\nScenario.ATTACH_MISSING_CALLBACK_ARGUMENT_FOR_STREAM_READABLE = 'Cucumber.Api.Scenario.attach() expects a callback when data is a stream.Readable';\nScenario.ATTACH_INVALID_DATA_TYPE = 'Cucumber.Api.Scenario.attach() expects data to be a stream, buffer, or string.';\n\nmodule.exports = Scenario;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/ast.js":"var Ast             = {};\nAst.DataTable       = require('./ast/data_table');\nAst.DocString       = require('./ast/doc_string');\nAst.Feature         = require('./ast/feature');\nAst.Filter          = require('./ast/filter');\nAst.Scenario        = require('./ast/scenario');\nAst.Step            = require('./ast/step');\nAst.HookStep        = require('./ast/hook_step');\nAst.Tag             = require('./ast/tag');\nmodule.exports      = Ast;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/ast/data_table.js":"function DataTable(data) {\n  var Cucumber = require('../../cucumber');\n  var _ = require('lodash');\n\n  var rawTable = data.rows.map(function (row) {\n    return row.cells.map(function (cell) {\n      return cell.value;\n    });\n  });\n\n  var self = {\n    getType: function getType() {\n      return 'DataTable';\n    },\n\n    rows: function rows() {\n      var copy = self.raw();\n      copy.shift();\n      return copy;\n    },\n\n    rowsHash: function rowsHash() {\n      var rows = self.raw();\n      var everyRowHasTwoColumns = rows.every(function (row) {\n        return row.length === 2;\n      });\n\n      if (!everyRowHasTwoColumns) {\n        throw new Error('rowsHash was called on a data table with more than two columns');\n      }\n\n      return _.fromPairs(rows);\n    },\n\n    raw: function raw() {\n      return rawTable.slice(0);\n    },\n\n    hashes: function hashes() {\n      var raw              = self.raw();\n      var hashDataTable    = Cucumber.Type.HashDataTable(raw);\n      var rawHashDataTable = hashDataTable.raw();\n      return rawHashDataTable;\n    }\n  };\n  return self;\n}\n\nmodule.exports = DataTable;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/ast/doc_string.js":"function DocString(data) {\n  var self = {\n    getType: function getType() {\n      return 'DocString';\n    },\n\n    getContent: function getContent() {\n      return data.content;\n    },\n\n    getContentType: function getContentType() {\n      return data.contentType;\n    },\n\n    getLine: function getLine() {\n      return data.location.line;\n    }\n  };\n  return self;\n}\n\nmodule.exports = DocString;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/ast/feature.js":"function Feature(data, uri, scenarios) {\n  var Cucumber = require('../../cucumber');\n  var Gherkin = require('gherkin');\n  var _ = require('lodash');\n\n  var tags = [];\n  if (data.tags) {\n    tags = data.tags.map(function (tagData) {\n      return Cucumber.Ast.Tag(tagData);\n    });\n  }\n\n  var self = {\n    getStepKeywordByLines: function getStepKeywordByLines(lines) {\n      var steps = _.flatten(_.map(data.children, 'steps'));\n      var step = _.find(steps, function(node) {\n        return _.includes(lines, node.location.line);\n      });\n      if (step) {\n        return step.keyword;\n      }\n    },\n\n    getScenarioDescriptionByLines: function getScenarioDescriptionByLines(lines) {\n      var element = _.find(data.children, function(node) {\n        return _.includes(lines, node.location.line);\n      });\n      if (element) {\n        return element.description;\n      }\n    },\n\n    getScenarioKeyword: function() {\n      return Gherkin.DIALECTS[self.getLanguage()].scenario;\n    },\n\n    getKeyword: function getKeyword() {\n      return data.keyword;\n    },\n\n    getLanguage: function getKeyword() {\n      return data.language;\n    },\n\n    getName: function getName() {\n      return data.name;\n    },\n\n    getDescription: function getDescription() {\n      return data.description;\n    },\n\n    getUri: function getUri() {\n      return uri;\n    },\n\n    getLine: function getLine() {\n      return data.location.line;\n    },\n\n    getTags: function getTags() {\n      return tags;\n    },\n\n    getScenarios: function getScenarios() {\n      return scenarios;\n    }\n  };\n\n  scenarios.forEach(function(scenario) {\n    scenario.setFeature(self);\n  });\n\n  return self;\n}\n\nmodule.exports = Feature;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/ast/filter.js":"var _ = require('lodash');\n\nfunction Filter(rules) {\n  var self = {\n    isElementEnrolled: function isElementEnrolled(element) {\n      var enrolled = _.every(rules, function (rule) {\n        return rule.isSatisfiedByElement(element);\n      });\n      return enrolled;\n    }\n  };\n  return self;\n}\n\nFilter.AnyOfTagsRule          = require('./filter/any_of_tags_rule');\nFilter.AnyOfNamesRule         = require('./filter/any_of_names_rule');\nFilter.ElementMatchingTagSpec = require('./filter/element_matching_tag_spec');\nFilter.ScenarioAtLineRule     = require('./filter/scenario_at_line_rule');\n\nmodule.exports = Filter;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/ast/filter/any_of_tags_rule.js":"var _ = require('lodash');\n\nfunction AnyOfTagsRule(tags) {\n  var Cucumber = require('../../../cucumber');\n\n  var self = {\n    isSatisfiedByElement: function isSatisfiedByElement(element) {\n      var satisfied = _.some(tags, function (tag) {\n        var spec = Cucumber.Ast.Filter.ElementMatchingTagSpec(tag);\n        return spec.isMatching(element);\n      });\n      return satisfied;\n    }\n  };\n  return self;\n}\n\nmodule.exports = AnyOfTagsRule;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/ast/filter/any_of_names_rule.js":"var _ = require('lodash');\n\nfunction AnyOfNamesRule(names) {\n  var self = {\n    isSatisfiedByElement: function isSatisfiedByElement(element) {\n      if (names.length === 0) {\n        return true;\n      }\n      var satisfied = _.some(names, function (name) {\n        return element.getName().match(name);\n      });\n      return satisfied;\n    }\n  };\n  return self;\n}\n\nmodule.exports = AnyOfNamesRule;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/ast/filter/element_matching_tag_spec.js":"var _ = require('lodash');\n\nfunction ElementMatchingTagSpec(tagName) {\n  var self = {\n    isMatching: function isMatching(element) {\n      var elementTags = element.getTags();\n      var matching;\n      if (self.isExpectingTag())\n        matching = _.some(elementTags, self.isTagSatisfying);\n      else\n        matching = _.every(elementTags, self.isTagSatisfying);\n      return matching;\n    },\n\n    isTagSatisfying: function isTagSatisfying(tag) {\n      var checkedTagName = tag.getName();\n      var satisfying;\n      if (self.isExpectingTag())\n        satisfying = checkedTagName === tagName;\n      else {\n        var negatedCheckedTagName = ElementMatchingTagSpec.NEGATION_CHARACTER + checkedTagName;\n        satisfying = negatedCheckedTagName !== tagName;\n      }\n      return satisfying;\n    },\n\n    isExpectingTag: function isExpectingTag() {\n      var expectingTag = tagName[0] !== ElementMatchingTagSpec.NEGATION_CHARACTER;\n      return expectingTag;\n    }\n  };\n  return self;\n}\n\nElementMatchingTagSpec.NEGATION_CHARACTER = '~';\n\nmodule.exports = ElementMatchingTagSpec;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/ast/filter/scenario_at_line_rule.js":"function ScenarioAtLineRule(suppliedPaths) {\n  var Cucumber = require('../../../cucumber');\n  var fs = require('fs');\n  var _ = require('lodash');\n\n  var mapping = {};\n  suppliedPaths.forEach(function(path){\n    var matches = Cucumber.Cli.Configuration.FEATURE_FILENAME_AND_LINENUM_REGEXP.exec(path);\n    var specifiedLineNums = matches && matches[2];\n    if (specifiedLineNums) {\n      var realPath = fs.realpathSync(matches[1]);\n      if (!mapping[realPath]) {\n        mapping[realPath] = [];\n      }\n      specifiedLineNums.split(':').forEach(function (lineNum) {\n        mapping[realPath].push(parseInt(lineNum));\n      });\n    }\n  });\n\n  var self = {\n    isSatisfiedByElement: function isSatisfiedByElement(element) {\n      if (element.getUri && element.getLines) {\n        var lines = mapping[element.getUri()];\n        if (lines) {\n          return _.some(element.getLines(), function (line) {\n            return _.includes(lines, line);\n          });\n        }\n      }\n      return true;\n    }\n  };\n  return self;\n}\n\nmodule.exports = ScenarioAtLineRule;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/ast/scenario.js":"function Scenario(data, uri) {\n  var Cucumber = require('../../cucumber');\n  var _ = require('lodash');\n  var feature, steps, tags = [];\n\n  var self = {\n    getName: function getName() {\n      return data.name;\n    },\n\n    getKeyword: function getKeyword() {\n      return self.getFeature().getScenarioKeyword();\n    },\n\n    getDescription: function getDescription() {\n      return self.getFeature().getScenarioDescriptionByLines(self.getLines());\n    },\n\n    getFeature: function getFeature() {\n      return feature;\n    },\n\n    setFeature: function setFeature(value) {\n      feature = value;\n    },\n\n    getUri: function getUri() {\n      return uri;\n    },\n\n    getLine: function getLine() {\n      return _.first(self.getLines());\n    },\n\n    getLines: function getLines() {\n      return _.map(data.locations, 'line');\n    },\n\n    getTags: function getTags() {\n      return tags;\n    },\n\n    getSteps: function getSteps() {\n      return steps;\n    }\n  };\n\n  var previousStep;\n  steps = data.steps.map(function (stepData) {\n    var step = Cucumber.Ast.Step(stepData);\n    step.setScenario(self);\n    step.setPreviousStep(previousStep);\n    previousStep = step;\n    return step;\n  });\n\n  if (data.tags) {\n    tags = data.tags.map(function (tagData) {\n      return Cucumber.Ast.Tag(tagData);\n    });\n  }\n\n  return self;\n}\n\nmodule.exports = Scenario;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/ast/step.js":"function Step(data) {\n  var Cucumber = require('../../cucumber');\n  var Gherkin = require('gherkin');\n  var _ = require('lodash');\n  var previousStep, scenario;\n\n  var stepArguments = [];\n\n  if (data.arguments) {\n    stepArguments = data.arguments.map(function (arg) {\n      if (arg.hasOwnProperty('content')) {\n        return Cucumber.Ast.DocString(arg);\n      } else if (arg.hasOwnProperty('rows')) {\n        return Cucumber.Ast.DataTable(arg);\n      } else {\n        throw new Error('Unknown step argument type: ' + JSON.stringify(arg));\n      }\n    });\n  }\n\n  var self = {\n    getScenario: function getScenario() {\n      return scenario;\n    },\n\n    setScenario: function setScenario(newScenario) {\n      scenario = newScenario;\n    },\n\n    setPreviousStep: function setPreviousStep(newPreviousStep) {\n      previousStep = newPreviousStep;\n    },\n\n    isHidden: function isHidden() {\n      return false;\n    },\n\n    getName: function getName() {\n      return data.text;\n    },\n\n    getKeyword: function getKeyword() {\n      return self.getScenario().getFeature().getStepKeywordByLines(self.getLines());\n    },\n\n    hasUri: function hasUri() {\n      return true;\n    },\n\n    getLine: function getLine() {\n      return _.last(self.getLines());\n    },\n\n    getLines: function getLines() {\n      return _.map(data.locations, 'line');\n    },\n\n    getUri: function getUri() {\n      return self.getScenario().getUri();\n    },\n\n    getPreviousStep: function getPreviousStep() {\n      return previousStep;\n    },\n\n    hasPreviousStep: function hasPreviousStep() {\n      return !!previousStep;\n    },\n\n    getArguments: function getArguments() {\n      return stepArguments;\n    },\n\n    isOutcomeStep: function isOutcomeStep() {\n      return self.hasOutcomeStepKeyword() || self.isRepeatingOutcomeStep();\n    },\n\n    isEventStep: function isEventStep() {\n      return self.hasEventStepKeyword() || self.isRepeatingEventStep();\n    },\n\n    hasOutcomeStepKeyword: function hasOutcomeStepKeyword() {\n      var language = self.getScenario().getFeature().getLanguage();\n      return _.chain(Gherkin.DIALECTS[language].then)\n        .includes(self.getKeyword())\n        .value();\n    },\n\n    hasEventStepKeyword: function hasEventStepKeyword() {\n      var language = self.getScenario().getFeature().getLanguage();\n      return _.chain(Gherkin.DIALECTS[language].when)\n        .includes(self.getKeyword())\n        .value();\n    },\n\n    isRepeatingOutcomeStep: function isRepeatingOutcomeStep() {\n      return self.hasRepeatStepKeyword() && self.isPrecededByOutcomeStep();\n    },\n\n    isRepeatingEventStep: function isRepeatingEventStep() {\n      return self.hasRepeatStepKeyword() && self.isPrecededByEventStep();\n    },\n\n    hasRepeatStepKeyword: function hasRepeatStepKeyword() {\n      var language = self.getScenario().getFeature().getLanguage();\n      return _.chain(Gherkin.DIALECTS[language].and)\n        .concat(Gherkin.DIALECTS[language].but)\n        .includes(self.getKeyword())\n        .value();\n    },\n\n    isPrecededByOutcomeStep: function isPrecededByOutcomeStep() {\n      var result = false;\n\n      if (self.hasPreviousStep()) {\n        var previousStep = self.getPreviousStep();\n        result = previousStep.isOutcomeStep();\n      }\n      return result;\n    },\n\n    isPrecededByEventStep: function isPrecededByEventStep() {\n      var result = false;\n\n      if (self.hasPreviousStep()) {\n        var previousStep = self.getPreviousStep();\n        result = previousStep.isEventStep();\n      }\n      return result;\n    }\n  };\n  return self;\n}\n\nStep.EVENT_STEP_KEYWORD   = 'When ';\nStep.OUTCOME_STEP_KEYWORD = 'Then ';\nStep.AND_STEP_KEYWORD     = 'And ';\nStep.BUT_STEP_KEYWORD     = 'But ';\nStep.STAR_STEP_KEYWORD    = '* ';\n\nmodule.exports = Step;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/ast/hook_step.js":"function HookStep(keyword) {\n  var Cucumber = require('../../cucumber');\n  var self = Cucumber.Ast.Step({});\n\n  self.getKeyword = function getKeyword() {\n    return keyword;\n  };\n\n  self.isHidden = function isHidden() {\n    return true;\n  };\n\n  self.hasUri = function hasUri() {\n    return false;\n  };\n\n  return self;\n}\n\nHookStep.BEFORE_STEP_KEYWORD = 'Before ';\nHookStep.AFTER_STEP_KEYWORD = 'After ';\n\nmodule.exports = HookStep;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/ast/tag.js":"function Tag(data) {\n  var self = {\n    getName: function getName() {\n      return data.name;\n    },\n\n    getLine: function getLine() {\n      return data.location.line;\n    }\n  };\n  return self;\n}\n\nmodule.exports = Tag;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/cli.js":"function Cli(argv) {\n  var Cucumber = require('../cucumber');\n  var Command = require('commander').Command;\n  var path = require('path');\n  var _ = require('lodash');\n\n  function mergeWorldParametersJson(str, memo) {\n    var val;\n    try {\n      val = JSON.parse(str);\n    } catch (error) {\n      throw new Error('--world-parameters passed invalid JSON: ' + error.message + ': ' + str);\n    }\n    if (!_.isPlainObject(val)) {\n      throw new Error('--world-parameters must be passed a JSON string of an object: ' + str);\n    }\n    _.merge(memo, val);\n    return memo;\n  }\n\n  function collect(val, memo) {\n    memo.push(val);\n    return memo;\n  }\n\n  function getProgram () {\n    var program = new Command(path.basename(argv[1]));\n\n    program\n      .usage('[options] [<DIR | FILE[:LINE]>...]')\n      .version(Cucumber.VERSION, '-v, --version')\n      .option('-b, --backtrace', 'show full backtrace for errors')\n      .option('--compiler <EXTENSION:MODULE>', 'require files with the given EXTENSION after requiring MODULE (repeatable)', collect, [])\n      .option('-d, --dry-run', 'invoke formatters without executing steps')\n      .option('--fail-fast', 'abort the run on first failure')\n      .option('-f, --format <TYPE[:PATH]>', 'specify the output format, optionally supply PATH to redirect formatter output (repeatable)', collect, ['pretty'])\n      .option('--name <REGEXP>', 'only execute the scenarios with name matching the expression (repeatable)', collect, [])\n      .option('--no-colors', 'disable colors in formatter output')\n      .option('-p, --profile <NAME>', 'specify the profile to use (repeatable)', collect, [])\n      .option('-r, --require <FILE | DIR>', 'require files before executing features (repeatable)', collect, [])\n      .option('--snippet-interface [callback | generator | promise | synchronous]', 'specify a snippet interface', 'callback')\n      .option('--snippet-syntax [<FILE>]', 'specify a custom snippet syntax')\n      .option('-S, --strict', 'fail if there are any undefined or pending steps')\n      .option('-t, --tags <EXPRESSION>', 'only execute the features or scenarios with tags matching the expression (repeatable)', collect, [])\n      .option('--world-parameters <JSON>', 'provide parameters that will be passed to the world constructor (repeatable)', mergeWorldParametersJson, {});\n\n    program.on('--help', function(){\n      console.log('  For more details please visit https://github.com/cucumber/cucumber-js#cli\\n');\n    });\n\n    return program;\n  }\n\n  function getConfiguration() {\n    var program = getProgram();\n    program.parse(argv);\n    var profileArgs = Cucumber.Cli.ProfilesLoader.getArgs(program.profile);\n    if (profileArgs.length > 0) {\n      var fullArgs = argv.slice(0, 2).concat(profileArgs).concat(argv.slice(2));\n      program = getProgram();\n      program.parse(fullArgs);\n    }\n    var configuration = Cucumber.Cli.Configuration(program.opts(), program.args);\n    return configuration;\n  }\n\n  var self = {\n    run: function run(callback) {\n      var configuration = getConfiguration();\n      var runtime    = Cucumber.Runtime(configuration);\n      var formatters = configuration.getFormatters();\n      formatters.forEach(function (formatter) {\n        runtime.attachListener(formatter);\n      });\n      runtime.start(callback);\n    }\n  };\n  return self;\n}\n\nCli.Configuration = require('./cli/configuration');\nCli.FeaturePathExpander = require('./cli/feature_path_expander');\nCli.FeatureSourceLoader = require('./cli/feature_source_loader');\nCli.PathExpander = require('./cli/path_expander');\nCli.ProfilesLoader = require('./cli/profiles_loader');\nCli.SupportCodeLoader = require('./cli/support_code_loader');\nCli.SupportCodePathExpander = require('./cli/support_code_path_expander');\n\nmodule.exports = Cli;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/cli/configuration.js":"function Configuration(options, args) {\n  var Cucumber = require('../../cucumber');\n  var path = require('path');\n  var fs = require('fs');\n  var _ = require('lodash');\n\n  var unexpandedFeaturePaths = ['features'];\n  if (args.length > 0) {\n    unexpandedFeaturePaths = [];\n    args.forEach(function(arg) {\n      var filename = path.basename(arg);\n      if (filename[0] === '@') {\n        var content = fs.readFileSync(arg, 'utf8');\n        unexpandedFeaturePaths = unexpandedFeaturePaths.concat(content.split('\\n'));\n      } else {\n        unexpandedFeaturePaths.push(arg);\n      }\n    });\n  }\n\n  var expandedFeaturePaths = Cucumber.Cli.FeaturePathExpander.expandPaths(unexpandedFeaturePaths);\n\n\n  function getCompilerExtensions() {\n    return options.compiler.map(function(compiler) {\n      return compiler.split(':')[0];\n    });\n  }\n\n  function getCompilerModules() {\n    return options.compiler.map(function(compiler) {\n      return compiler.split(':')[1];\n    });\n  }\n\n\n  function getFeatureDirectoryPaths() {\n    return expandedFeaturePaths.map(function (featurePath) {\n      return path.dirname(featurePath);\n    });\n  }\n\n  function getFormats() {\n    var outputMapping = {};\n    options.format.forEach(function (format) {\n      var parts = format.split(':');\n      var type = parts[0];\n      var outputTo = parts.slice(1).join(':');\n      outputMapping[outputTo] = type;\n    });\n    return _.map(outputMapping, function (type, outputTo) {\n      var stream = process.stdout;\n      if (outputTo) {\n        var fd = fs.openSync(outputTo, 'w');\n        stream = fs.createWriteStream(null, {fd: fd});\n      }\n      return {stream: stream, type: type};\n    });\n  }\n\n  function getSnippetSyntax () {\n    var builder = Cucumber.SupportCode.StepDefinitionSnippetBuilder.JavaScriptSyntax;\n    if (options.snippetSyntax) {\n      var snippetSyntaxPath = path.resolve(process.cwd(), options.snippetSyntax);\n      builder = require(snippetSyntaxPath);\n    }\n    return builder(options.snippetInterface);\n  }\n\n  function getSupportCodePaths() {\n    var unexpandedSupportCodePaths = options.require.length > 0 ? options.require : getFeatureDirectoryPaths();\n    var extensions = ['js'].concat(getCompilerExtensions());\n    return Cucumber.Cli.SupportCodePathExpander.expandPaths(unexpandedSupportCodePaths, extensions);\n  }\n\n  var self = {\n\n    getFormatters: function getFormatters() {\n      var formats = getFormats();\n      var snippetSyntax = getSnippetSyntax();\n      var formatters = formats.map(function (format) {\n        var formatterOptions = {\n          snippetSyntax: snippetSyntax,\n          stream: format.stream,\n          useColors: options.colors\n        };\n\n        switch(format.type) {\n          case 'json':\n            return Cucumber.Listener.JsonFormatter(formatterOptions);\n          case 'progress':\n            return Cucumber.Listener.ProgressFormatter(formatterOptions);\n          case 'pretty':\n            return Cucumber.Listener.PrettyFormatter(formatterOptions);\n          case 'snippets':\n            return Cucumber.Listener.SnippetsFormatter(formatterOptions);\n          case 'summary':\n            return Cucumber.Listener.SummaryFormatter(formatterOptions);\n          case 'rerun':\n            return Cucumber.Listener.RerunFormatter(formatterOptions);\n          default:\n            throw new Error('Unknown formatter name \"' + format.type + '\".');\n        }\n      });\n      return formatters;\n    },\n\n    getFeatureSources: function getFeatureSources() {\n      var featureSourceLoader = Cucumber.Cli.FeatureSourceLoader(expandedFeaturePaths);\n      return featureSourceLoader.getSources();\n    },\n\n    getAstFilter: function getAstFilter() {\n      var tagGroups = Cucumber.TagGroupParser.getTagGroupsFromStrings(options.tags);\n      var tagRules = tagGroups.map(function (tags) {\n         return Cucumber.Ast.Filter.AnyOfTagsRule(tags);\n      });\n      var lineRule = Cucumber.Ast.Filter.ScenarioAtLineRule(unexpandedFeaturePaths);\n      var nameRule = Cucumber.Ast.Filter.AnyOfNamesRule(options.name);\n      var rules = tagRules.concat([lineRule, nameRule]);\n      return Cucumber.Ast.Filter(rules);\n    },\n\n    getSupportCodeLibrary: function getSupportCodeLibrary() {\n      var supportCodePaths = getSupportCodePaths();\n      var compilerModules = getCompilerModules();\n      var supportCodeLoader = Cucumber.Cli.SupportCodeLoader(supportCodePaths, compilerModules);\n      return supportCodeLoader.getSupportCodeLibrary();\n    },\n\n    getWorldParameters: function getWorldParameters() {\n      return options.worldParameters;\n    },\n\n    isFailFastRequested: function isFailFastRequested() {\n      return options.failFast;\n    },\n\n    isDryRunRequested: function isDryRunRequested() {\n      return options.dryRun;\n    },\n\n    isStrictRequested: function isStrictRequested() {\n      return options.strict;\n    },\n\n    shouldFilterStackTraces: function shouldFilterStackTraces() {\n      return !options.backtrace;\n    }\n  };\n  return self;\n}\n\nConfiguration.FEATURE_FILENAME_AND_LINENUM_REGEXP = /([^\\:]*)((?::[\\d]+)+)?/;\n\nmodule.exports = Configuration;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/cli/feature_path_expander.js":"var FeaturePathExpander = {\n  expandPaths: function expandPaths(paths) {\n    var Cucumber     = require('../../cucumber');\n    var PathExpander = Cucumber.Cli.PathExpander;\n\n    paths = paths.map(function(path) {\n      return path.replace(/(:\\d+)*$/g, ''); // Strip line numbers\n    });\n    var expandedPaths = PathExpander.expandPathsWithExtensions(paths, ['feature']);\n    return expandedPaths;\n  }\n};\nmodule.exports = FeaturePathExpander;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/cli/feature_source_loader.js":"function FeatureSourceLoader(featureFilePaths) {\n  var fs = require('fs');\n\n  var self = {\n    getSources: function getSources() {\n      var sources = [];\n      featureFilePaths.forEach(function (featureFilePath) {\n        var source = fs.readFileSync(featureFilePath, 'utf8');\n        sources.push([featureFilePath, source]);\n      });\n      return sources;\n    }\n  };\n  return self;\n}\n\nmodule.exports = FeatureSourceLoader;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/cli/path_expander.js":"var fs = require('fs');\nvar glob = require('glob');\nvar _ = require('lodash');\n\nvar PathExpander = {\n  expandPathsWithExtensions: function expandPathsWithExtensions(paths, extensions) {\n    var expandedPaths = paths.map(function (path) {\n      return PathExpander.expandPathWithExtensions(path, extensions);\n    });\n    return _.uniq(_.flatten(expandedPaths));\n  },\n\n  expandPathWithExtensions: function expandPathWithExtensions(path, extensions) {\n    var realPath = fs.realpathSync(path);\n    var stats = fs.statSync(realPath);\n    if (stats.isDirectory()) {\n      return this.expandDirectoryWithExtensions(realPath, extensions);\n    } else {\n      return [realPath];\n    }\n  },\n\n  expandDirectoryWithExtensions: function expandDirectoryWithExtensions(realPath, extensions) {\n    var pattern = realPath + '/**/*.';\n    if (extensions.length > 1) {\n      pattern += '{' + extensions.join(',') + '}';\n    } else {\n      pattern += extensions[0];\n    }\n    return glob.sync(pattern);\n  }\n};\n\nmodule.exports = PathExpander;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/cli/profiles_loader.js":"var fs = require('fs');\nvar path = require('path');\nvar _ = require('lodash');\n\nfunction getDefinitions () {\n  var definitionFilePath = path.join(process.cwd(), 'cucumber.js');\n  if (fs.existsSync(definitionFilePath)) {\n    var definitions = require(definitionFilePath);\n    if (typeof definitions !== 'object') {\n      throw new Error(definitionFilePath + ' does not export an object');\n    }\n    return definitions;\n  } else {\n    return {};\n  }\n}\n\nvar ProfilesLoader = {\n  getArgs: function getArgs (profiles) {\n    var definitions = getDefinitions();\n    if (profiles.length === 0 && definitions['default']) {\n      profiles = ['default'];\n    }\n    var profilesArgs = profiles.map(function (profile){\n      if (!definitions[profile]){\n        throw new Error('Undefined profile: ' + profile);\n      }\n      return definitions[profile].split(/\\s/);\n    });\n    return _.flatten(profilesArgs);\n  }\n};\n\nmodule.exports = ProfilesLoader;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/cli/support_code_loader.js":"var os = require('os');\nvar path = require('path');\n\nfunction SupportCodeLoader(supportCodeFilePaths, compilerModules) {\n  var Cucumber = require('../../cucumber');\n\n  var self = {\n    getSupportCodeLibrary: function getSupportCodeLibrary() {\n      var supportCodeInitialiazer = self.getSupportCodeInitializer();\n      var supportCodeLibrary      = Cucumber.SupportCode.Library(supportCodeInitialiazer);\n      return supportCodeLibrary;\n    },\n\n    getSupportCodeInitializer: function getSupportCodeInitializer() {\n      var primeSupportCodeInitializer     = self.getPrimeSupportCodeInitializer();\n      var secondarySupportCodeInitializer = self.getSecondarySupportCodeInitializer();\n      var initializer = function () {\n        var supportCodeHelper = this;\n        var userLandModulesPath = path.join(process.cwd(), 'node_modules');\n        process.env.NODE_PATH += SupportCodeLoader.ENV_VAR_PATH_SEPARATOR + userLandModulesPath;\n        require('module').Module._initPaths();\n        compilerModules.forEach(require);\n        primeSupportCodeInitializer.call(supportCodeHelper);\n        secondarySupportCodeInitializer.call(supportCodeHelper);\n      };\n      return initializer;\n    },\n\n    getPrimeSupportCodeInitializer: function getPrimeSupportCodeInitializer() {\n      var primeSupportCodeFilePaths   = self.getPrimeSupportCodeFilePaths();\n      var primeSupportCodeInitializer = self.buildSupportCodeInitializerFromPaths(primeSupportCodeFilePaths);\n      return primeSupportCodeInitializer;\n     },\n\n    getSecondarySupportCodeInitializer: function getSecondarySupportCodeBlocks() {\n      var secondarySupportCodeFilePaths = self.getSecondarySupportCodeFilePaths();\n      var secondarySupportCodeInitializer = self.buildSupportCodeInitializerFromPaths(secondarySupportCodeFilePaths);\n      return secondarySupportCodeInitializer;\n    },\n\n    getPrimeSupportCodeFilePaths: function getPrimeSupportCodeFilePaths() {\n      var primeSupportCodeFilePaths = [];\n      supportCodeFilePaths.forEach(function (path) {\n        if (path.match(SupportCodeLoader.PRIME_SUPPORT_CODE_PATH_REGEXP))\n          primeSupportCodeFilePaths.push(path);\n      });\n      return primeSupportCodeFilePaths;\n    },\n\n    getSecondarySupportCodeFilePaths: function getSecondarySupportCodeFilePaths() {\n      var secondarySupportCodeFilePaths = [];\n      supportCodeFilePaths.forEach(function (path) {\n        if (!path.match(SupportCodeLoader.PRIME_SUPPORT_CODE_PATH_REGEXP))\n          secondarySupportCodeFilePaths.push(path);\n      });\n      return secondarySupportCodeFilePaths;\n    },\n\n    buildSupportCodeInitializerFromPaths: function buildSupportCodeInitializerFromPaths(paths) {\n      var wrapper = function () {\n        var supportCodeHelper = this;\n        paths.forEach(function (path) {\n          var initializer = require(path);\n          if (typeof(initializer) === 'function') {\n            initializer.call(supportCodeHelper);\n          } else if (initializer.hasOwnProperty('default') && typeof(initializer.default) === 'function') {\n            initializer.default.call(supportCodeHelper);\n          }\n        });\n      };\n      return wrapper;\n    }\n  };\n  return self;\n}\n\nSupportCodeLoader.WINDOWS_PLATFORM_REGEXP = /^win/;\nSupportCodeLoader.PRIME_SUPPORT_CODE_PATH_REGEXP = os.platform().match(SupportCodeLoader.WINDOWS_PLATFORM_REGEXP) ? /\\\\support\\\\/ : /\\/support\\//i;\nSupportCodeLoader.ENV_VAR_PATH_SEPARATOR = os.platform().match(SupportCodeLoader.WINDOWS_PLATFORM_REGEXP) ? ';' : ':';\n\nmodule.exports = SupportCodeLoader;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/cli/support_code_path_expander.js":"var SupportCodePathExpander = {\n  expandPaths: function expandPaths(paths, extensions) {\n    var Cucumber = require('../../cucumber');\n    var PathExpander = Cucumber.Cli.PathExpander;\n\n    var expandedPaths = PathExpander.expandPathsWithExtensions(paths, extensions);\n    return expandedPaths;\n  }\n};\nmodule.exports = SupportCodePathExpander;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/debug.js":"var Debug = {\n  TODO: function TODO(description) {\n    return function () { throw(new Error('IMPLEMENT ME: ' + description)); };\n  },\n\n  warn: function warn(string, caption, level) {\n    if (Debug.isMessageLeveltoBeDisplayed(level))\n      process.stdout.write(Debug.warningString(string, caption));\n  },\n\n  notice: function notice(string, caption, level) {\n    if (Debug.isMessageLeveltoBeDisplayed(level))\n      process.stdout.write(Debug.noticeString(string, caption));\n  },\n\n  warningString: function warningString(string, caption) {\n    caption = caption || 'debug-warning';\n    return '\\x1B[30;43m' + caption + ':\\x1B[0m[33m' + string + '\\x1B[0m';\n  },\n\n  noticeString: function noticeString(string, caption) {\n    caption = caption || 'debug-notice';\n    return '\\x1B[30;46m' + caption + ':\\x1B[0m \\x1B[36m' + string + '\\x1B[0m';\n  },\n\n  prefix: function prefix() {\n    return ;\n  },\n\n  isMessageLeveltoBeDisplayed: function isMessageLeveltoBeDisplayed(level) {\n    if (process.env) {\n      level = level || 3; // default level\n      return (level <= process.env.DEBUG_LEVEL);\n    } else {\n      return false;\n    }\n  }\n};\n\nDebug.SimpleAstListener = require('./debug/simple_ast_listener');\nmodule.exports          = Debug;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/debug/simple_ast_listener.js":"function SimpleAstListener(options) {\n  var logs                        = '';\n  var failed                      = false;\n  var beforeEachScenarioCallbacks = [];\n  var currentFeature, currentStep;\n\n  if (!options)\n    options = {};\n\n  function indent(text, indentation) {\n    var indented;\n    text.split('\\n').forEach(function (line) {\n      var prefix = new Array(indentation + 1).join('  ');\n      line = prefix + line;\n      indented = (typeof(indented) === 'undefined' ? line : indented + '\\n' + line);\n    });\n    return indented;\n  }\n\n  function log(message, indentation) {\n    if (indentation)\n      message = indent(message, indentation);\n    logs = logs + message + '\\n';\n    if (options.stream)\n      options.stream.write(message);\n    if (typeof(options.logToFunction) === 'function')\n      options.logToFunction (message);\n  }\n\n  var self = {\n    hear: function hear(event, callback) {\n      switch(event.getName()) {\n      case 'BeforeFeature':\n        self.hearBeforeFeature(event.getPayloadItem('feature'), callback);\n        break;\n      case 'BeforeScenario':\n        self.hearBeforeScenario(event.getPayloadItem('scenario'), callback);\n        break;\n      case 'BeforeStep':\n        self.hearBeforeStep(event.getPayloadItem('step'), callback);\n        break;\n      case 'StepResult':\n        self.hearStepResult(event.getPayloadItem('stepResult'), callback);\n        break;\n      default:\n        callback();\n      }\n    },\n\n    hearBeforeFeature: function hearBeforeFeature(feature, callback) {\n      currentFeature = feature;\n      log('Feature: ' + feature.getName());\n      var description = feature.getDescription();\n      if (description !== '')\n        log(description, 1);\n      callback();\n    },\n\n    hearBeforeScenario: function hearBeforeScenario(scenario, callback) {\n      beforeEachScenarioCallbacks.forEach(function (func) {\n        func();\n      });\n      log('');\n      log(scenario.getName(), 1);\n      callback();\n    },\n\n    hearBeforeStep: function hearBeforeStep(step, callback) {\n      currentStep = step;\n      currentStep =\n      callback();\n    },\n\n    hearStepResult: function hearStepResult(stepResult, callback) {\n      log(currentStep.getKeyword() + (currentStep.getName() || ''), 2);\n      if (currentStep.hasDocString()) {\n        log('\"\"\"', 3);\n        log(currentStep.getDocString().getContents(), 3);\n        log('\"\"\"', 3);\n      }\n      callback();\n    },\n\n    getLogs: function getLogs() {\n      return logs;\n    },\n\n    featuresPassed: function featuresPassed() {\n      return !failed;\n    },\n\n    beforeEachScenarioDo: function beforeEachScenarioDo(func) {\n      beforeEachScenarioCallbacks.push(func);\n    }\n  };\n  return self;\n}\n\nmodule.exports = SimpleAstListener;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/events.js":"var _ = require('lodash');\n\nvar events = {\n  FEATURES_EVENT_NAME: 'Features',\n  FEATURES_RESULT_EVENT_NAME: 'FeaturesResult',\n  FEATURE_EVENT_NAME: 'Feature',\n  SCENARIO_EVENT_NAME: 'Scenario',\n  SCENARIO_RESULT_EVENT_NAME: 'ScenarioResult',\n  STEP_EVENT_NAME: 'Step',\n  STEP_RESULT_EVENT_NAME: 'StepResult'\n};\n\nvar BEFORE_EVENT_NAME_PREFIX = 'Before';\nvar AFTER_EVENT_NAME_PREFIX = 'After';\n\nfunction getBeforeEvent(name) {\n  return BEFORE_EVENT_NAME_PREFIX + name;\n}\n\nfunction getAfterEvent(name) {\n  return AFTER_EVENT_NAME_PREFIX + name;\n}\n\nfunction getAroundEventsFor(name) {\n  return [\n    getBeforeEvent(name),\n    getAfterEvent(name)\n  ];\n}\n\nvar allEvents = _.flatten(_.map(events, function(event) {\n  if (_.includes(event, 'Result')) {\n    return [event];\n  } else {\n    return getAroundEventsFor(event);\n  }\n}));\n\nevents.getBeforeEvent = getBeforeEvent;\nevents.getAfterEvent = getAfterEvent;\nevents.ALL = allEvents;\n\nmodule.exports = events;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/listener.js":"var path = require('path');\n\nfunction Listener(options) {\n  var Cucumber     = require('../cucumber');\n\n  if (!options) {\n    options = {};\n  }\n\n  var self = {\n    hear: function hear(event, defaultTimeout, callback) {\n      if (self.hasHandlerForEvent(event)) {\n        var handler = self.getHandlerForEvent(event);\n        var timeout = self.getTimeout() || defaultTimeout;\n        Cucumber.Util.run(handler, null, [event.getPayload()], timeout, function(error) {\n          error = self.prependLocationToError(error);\n          callback(error);\n        });\n      } else {\n        callback();\n      }\n    },\n\n    hasHandlerForEvent: function hasHandlerForEvent(event) {\n      var handlerName = self.buildHandlerNameForEvent(event);\n      return self[handlerName] !== undefined;\n    },\n\n    buildHandlerNameForEvent: function buildHandlerNameForEvent(event) {\n      return self.buildHandlerName(event.getName());\n    },\n\n    getHandlerForEvent: function getHandlerForEvent(event) {\n      var eventHandlerName = self.buildHandlerNameForEvent(event);\n      return self[eventHandlerName];\n    },\n\n    buildHandlerName: function buildHandler(shortName) {\n      return Listener.EVENT_HANDLER_NAME_PREFIX + shortName + Listener.EVENT_HANDLER_NAME_SUFFIX;\n    },\n\n    setHandlerForEvent: function setHandlerForEvent(shortname, handler) {\n      var eventName = self.buildHandlerName(shortname);\n      self[eventName] = handler;\n    },\n\n    getTimeout: function() {\n      return options.timeout;\n    },\n\n    getUri: function() {\n      return options.uri;\n    },\n\n    getLine: function() {\n      return options.line;\n    },\n\n    prependLocationToError: function(error) {\n      if (error && self.getUri()) {\n        var ref = path.relative(process.cwd(), self.getUri()) + ':' + self.getLine() + ' ';\n        if (error instanceof Error) {\n          error.message = ref + error.message;\n        } else {\n          error = ref + error;\n        }\n      }\n      return error;\n    },\n  };\n  return self;\n}\n\nListener.EVENT_HANDLER_NAME_PREFIX = 'handle';\nListener.EVENT_HANDLER_NAME_SUFFIX = 'Event';\nListener.Formatter                 = require('./listener/formatter');\nListener.PrettyFormatter           = require('./listener/pretty_formatter');\nListener.ProgressFormatter         = require('./listener/progress_formatter');\nListener.JsonFormatter             = require('./listener/json_formatter');\nListener.RerunFormatter            = require('./listener/rerun_formatter');\nListener.SnippetsFormatter         = require('./listener/snippets_formatter');\nListener.SummaryFormatter          = require('./listener/summary_formatter');\n\nmodule.exports             = Listener;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/listener/formatter.js":"function Formatter(options) {\n  var Cucumber = require('../../cucumber');\n\n  if (!options)\n    options = {};\n\n  var logs = '';\n\n  var self = Cucumber.Listener(options);\n\n  self.log = function log(string) {\n    logs += string;\n    if (options.stream)\n      options.stream.write(string);\n    if (typeof(options.logToFunction) === 'function')\n      options.logToFunction(string);\n  };\n\n  self.finish = function finish(callback) {\n    if (options.stream && options.stream !== process.stdout)\n      options.stream.end(callback);\n    else\n      callback();\n  };\n\n  self.getLogs = function getLogs() {\n    return logs;\n  };\n\n  return self;\n}\n\nmodule.exports = Formatter;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/listener/pretty_formatter.js":"function PrettyFormatter(options) {\n  var Cucumber         = require('../../cucumber');\n  var figures          = require('figures');\n\n  var colors           = Cucumber.Util.Colors(options.useColors);\n  var self             = Cucumber.Listener.Formatter(options);\n  var summaryFormatter = Cucumber.Listener.SummaryFormatter({\n    snippetSyntax: options.snippetSyntax,\n    useColors: options.useColors\n  });\n\n  var parentHear = self.hear;\n  self.hear = function hear(event, defaultTimeout, callback) {\n    summaryFormatter.hear(event, defaultTimeout, function () {\n      parentHear(event, defaultTimeout, callback);\n    });\n  };\n\n  var characters = {};\n  characters[Cucumber.Status.AMBIGUOUS] = figures.cross;\n  characters[Cucumber.Status.FAILED] = figures.cross;\n  characters[Cucumber.Status.PASSED] = figures.tick;\n  characters[Cucumber.Status.PENDING] = '?';\n  characters[Cucumber.Status.SKIPPED] = '-';\n  characters[Cucumber.Status.UNDEFINED] = '?';\n\n  self.handleBeforeFeatureEvent = function handleBeforeFeatureEvent(feature) {\n    var source = '';\n\n    var tagsSource = self.formatTags(feature.getTags());\n    if (tagsSource) {\n      source = tagsSource + '\\n';\n    }\n\n    var identifier = feature.getKeyword() + ': ' + feature.getName();\n    source += identifier;\n\n    var description = feature.getDescription();\n    if (description) {\n      source += '\\n\\n' + self.indent(description, 1);\n    }\n\n    source += '\\n\\n';\n\n    self.log(source);\n  };\n\n  self.handleBeforeScenarioEvent = function handleBeforeScenarioEvent(scenario) {\n    var source = '';\n\n    var tagsSource = self.formatTags(scenario.getTags());\n    if (tagsSource) {\n      source = tagsSource + '\\n';\n    }\n\n    var identifier = scenario.getKeyword() + ': ' + scenario.getName();\n    source += identifier;\n\n    self.logIndented(source, 1);\n    self.log('\\n');\n  };\n\n  self.handleAfterScenarioEvent = function handleAfterScenarioEvent() {\n    self.log('\\n');\n  };\n\n  self.applyColor = function applyColor (stepResult, source) {\n    var status = stepResult.getStatus();\n    return colors[status](source);\n  };\n\n  self.getSymbol = function getSymbol (stepResult) {\n    var status = stepResult.getStatus();\n    return characters[status];\n  };\n\n  self.handleStepResultEvent = function handleStepResultEvent(stepResult) {\n    var step = stepResult.getStep();\n    if (!step.isHidden()) {\n      self.logStepResult(step, stepResult);\n    }\n  };\n\n  self.formatTags = function formatTags(tags) {\n    if (tags.length === 0) {\n      return '';\n    }\n\n    var tagNames = tags.map(function (tag) {\n      return tag.getName();\n    });\n\n    return colors.tag(tagNames.join(' '));\n  };\n\n  self.logStepResult = function logStepResult(step, stepResult) {\n    var symbol = self.getSymbol(stepResult);\n    var identifier = symbol + ' ' + step.getKeyword() + (step.getName() || '');\n    identifier = self.applyColor(stepResult, identifier);\n    self.logIndented(identifier, 1);\n    self.log('\\n');\n\n    step.getArguments().forEach(function (arg) {\n      var str;\n      switch(arg.getType()) {\n        case 'DataTable':\n          str = self.formatDataTable(stepResult, arg);\n          break;\n        case 'DocString':\n          str = self.formatDocString(stepResult, arg);\n          break;\n        default:\n          throw new Error('Unknown argument type: ' + arg.getType());\n      }\n      self.logIndented(str, 3);\n    });\n  };\n\n  self.handleAfterFeaturesEvent = function handleAfterFeaturesEvent(features, callback) {\n    var summaryLogs = summaryFormatter.getLogs();\n    self.log(summaryLogs);\n    self.finish(callback);\n  };\n\n  self.formatDataTable = function formatDataTable(stepResult, dataTable) {\n    var rows = dataTable.raw().map(function (row) {\n      return row.map(function (cell) {\n        return cell\n          .replace(/\\\\/g, '\\\\\\\\')\n          .replace(/\\n/g, '\\\\n');\n      });\n    });\n    var columnWidths = self._determineColumnWidthsFromRows(rows);\n    var source = '';\n    rows.forEach(function (row) {\n      source += '|';\n      row.forEach(function (cell, columnIndex) {\n        var columnWidth = columnWidths[columnIndex];\n        source += ' ' + self.applyColor(stepResult, self._pad(cell, columnWidth)) + ' |';\n      });\n      source += '\\n';\n    });\n    return source;\n  };\n\n  self.formatDocString = function formatDocString(stepResult, docString) {\n    var contents = '\"\"\"\\n' + docString.getContent() + '\\n\"\"\"';\n    return self.applyColor(stepResult, contents) + '\\n';\n  };\n\n  self.logIndented = function logIndented(text, level) {\n    var indented = self.indent(text, level);\n    self.log(indented);\n  };\n\n  self.indent = function indent(text, level) {\n    var indented;\n    text.split('\\n').forEach(function (line) {\n      var prefix = new Array(level + 1).join('  ');\n      line = (prefix + line).replace(/\\s+$/, '');\n      indented = (typeof(indented) === 'undefined' ? line : indented + '\\n' + line);\n    });\n    return indented;\n  };\n\n  self._determineColumnWidthsFromRows = function _determineColumnWidthsFromRows(rows) {\n    var columnWidths = [];\n    var currentColumn;\n\n    rows.forEach(function (cells) {\n      currentColumn = 0;\n      cells.forEach(function (cell) {\n        var currentColumnWidth = columnWidths[currentColumn];\n        var currentCellWidth   = cell.length;\n        if (typeof currentColumnWidth === 'undefined' || currentColumnWidth < currentCellWidth)\n          columnWidths[currentColumn] = currentCellWidth;\n        currentColumn += 1;\n      });\n    });\n\n    return columnWidths;\n  };\n\n  self._pad = function _pad(text, width) {\n    var padded = '' + text;\n    while (padded.length < width) {\n      padded += ' ';\n    }\n    return padded;\n  };\n\n  return self;\n}\n\nmodule.exports = PrettyFormatter;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/listener/progress_formatter.js":"function ProgressFormatter(options) {\n  var Cucumber = require('../../cucumber');\n\n  if (!options)\n    options = {};\n\n  var colors = Cucumber.Util.Colors(options.useColors);\n\n  var self             = Cucumber.Listener.Formatter(options);\n  var summaryFormatter = Cucumber.Listener.SummaryFormatter({\n    snippetSyntax: options.snippetSyntax,\n    useColors: options.useColors\n  });\n\n  var parentHear = self.hear;\n  self.hear = function hear(event, defaultTimeout, callback) {\n    summaryFormatter.hear(event, defaultTimeout, function () {\n      parentHear(event, defaultTimeout, callback);\n    });\n  };\n\n  var characters = {};\n  characters[Cucumber.Status.AMBIGUOUS] = 'A';\n  characters[Cucumber.Status.FAILED] = 'F';\n  characters[Cucumber.Status.PASSED] = '.';\n  characters[Cucumber.Status.PENDING] = 'P';\n  characters[Cucumber.Status.SKIPPED] = '-';\n  characters[Cucumber.Status.UNDEFINED] = 'U';\n\n  self.handleStepResultEvent = function handleStepResult(stepResult) {\n    var status = stepResult.getStatus();\n    var step = stepResult.getStep();\n    if (!step.isHidden() || status === Cucumber.Status.FAILED) {\n      var character = colors[status](characters[status]);\n      self.log(character);\n    }\n  };\n\n  self.handleAfterFeaturesEvent = function handleAfterFeaturesEvent(features, callback) {\n    var summaryLogs = summaryFormatter.getLogs();\n    self.log('\\n\\n');\n    self.log(summaryLogs);\n    self.finish(callback);\n  };\n\n  return self;\n}\n\nmodule.exports = ProgressFormatter;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/listener/json_formatter.js":"/* jshint -W106 */\nfunction JsonFormatter(options) {\n  var Cucumber = require('../../cucumber');\n\n  var self = Cucumber.Listener.Formatter(options);\n\n  var features = [];\n  var currentFeature;\n  var currentScenario;\n\n  var formatTag = function formatTag(tag) {\n    return {\n      name: tag.getName(),\n      line: tag.getLine()\n    };\n  };\n\n  self.handleBeforeFeatureEvent = function handleBeforeFeatureEvent(feature) {\n    currentFeature = {\n      description: feature.getDescription(),\n      elements: [],\n      id: feature.getName().replace(/ /g, '-').toLowerCase(),\n      keyword: feature.getKeyword(),\n      line: feature.getLine(),\n      name: feature.getName(),\n      tags: feature.getTags().map(formatTag),\n      uri: feature.getUri()\n    };\n    features.push(currentFeature);\n  };\n\n  self.handleBeforeScenarioEvent = function handleBeforeScenarioEvent(scenario) {\n    currentScenario = {\n      description: scenario.getDescription(),\n      id: currentFeature.id + ';' + scenario.getName().replace(/ /g, '-').toLowerCase(),\n      keyword: 'Scenario',\n      line: scenario.getLine(),\n      name: scenario.getName(),\n      steps: [],\n      tags: scenario.getTags().map(formatTag),\n      type: 'scenario'\n    };\n    currentFeature.elements.push(currentScenario);\n  };\n\n  self.handleStepResultEvent = function handleStepResultEvent(stepResult) {\n    var step = stepResult.getStep();\n    var status = stepResult.getStatus();\n\n    var currentStep = {\n      arguments: step.getArguments().map(function(arg) {\n        switch (arg.getType()) {\n          case 'DataTable':\n            return {\n              rows: arg.raw().map(function (row) {\n                return { cells: row };\n              })\n            };\n          case 'DocString':\n            return {\n              line: arg.getLine(),\n              content: arg.getContent(),\n              contentType: arg.getContentType()\n            };\n          default:\n            throw new Error('Unknown argument type:' + arg.getType());\n        }\n      }),\n      keyword: step.getKeyword(),\n      name: step.getName(),\n      result: {\n        status: status\n      }\n    };\n\n    if (step.isHidden()) {\n      currentStep.hidden = true;\n    } else {\n      currentStep.line = step.getLine();\n    }\n\n    if (status === Cucumber.Status.PASSED || status === Cucumber.Status.FAILED) {\n      currentStep.result.duration = stepResult.getDuration();\n    }\n\n    if (stepResult.hasAttachments()) {\n      currentStep.embeddings = stepResult.getAttachments().map(function (attachment) {\n        var data = attachment.getData();\n        if (!(data instanceof Buffer)) {\n          data = new Buffer(data);\n        }\n        return {\n          data: data.toString('base64'),\n          mime_type: attachment.getMimeType(),\n        };\n      });\n    }\n\n    if (status === Cucumber.Status.FAILED) {\n      var failureMessage = stepResult.getFailureException();\n      if (failureMessage) {\n        currentStep.result.error_message = (failureMessage.stack || failureMessage);\n      }\n    }\n\n    var stepDefinition = stepResult.getStepDefinition();\n    if (stepDefinition) {\n      var location = stepDefinition.getUri() + ':' + stepDefinition.getLine();\n      currentStep.match = {location: location};\n    }\n\n    currentScenario.steps.push(currentStep);\n  };\n\n  self.handleAfterFeaturesEvent = function handleAfterFeaturesEvent(event, callback) {\n    self.log(JSON.stringify(features, null, 2));\n    self.finish(callback);\n  };\n\n  return self;\n}\n\nmodule.exports = JsonFormatter;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/listener/rerun_formatter.js":"function RerunFormatter(options) {\n  var Cucumber = require('../../cucumber');\n  var path = require('path');\n  var _ = require('lodash');\n\n  var self = Cucumber.Listener.Formatter(options);\n  var failures = {};\n\n\n  self.handleScenarioResultEvent = function handleScenarioResultEvent(scenarioResult) {\n    if (scenarioResult.getStatus() !== Cucumber.Status.PASSED) {\n      var scenario = scenarioResult.getScenario();\n      var uri = path.relative(process.cwd(), scenario.getUri());\n      var line = scenario.getLine();\n      if (!failures[uri]) {\n        failures[uri] = [];\n      }\n      failures[uri].push(line);\n    }\n  };\n\n  self.handleAfterFeaturesEvent = function handleAfterFeaturesEvent(features, callback) {\n    var text = _.map(failures, function(lines, uri) {\n      return uri + ':' + lines.join(':');\n    }).join('\\n');\n    self.log(text);\n    self.finish(callback);\n  };\n\n  return self;\n}\n\nmodule.exports = RerunFormatter;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/listener/snippets_formatter.js":"function SnippetsFormatter(options) {\n  var Cucumber = require('../../cucumber');\n\n  var self = Cucumber.Listener.Formatter(options);\n  var snippets = [];\n\n  self.handleStepResultEvent = function handleStepResult(stepResult) {\n    var status = stepResult.getStatus();\n    if (status === Cucumber.Status.UNDEFINED) {\n      var step = stepResult.getStep();\n      var snippetBuilder = Cucumber.SupportCode.StepDefinitionSnippetBuilder(step, options.snippetSyntax);\n      snippets.push(snippetBuilder.buildSnippet());\n    }\n  };\n\n  self.handleFeaturesResultEvent = function handleFeaturesResultEvent(featuresResult, callback) {\n    self.log(snippets.join('\\n\\n'));\n    self.finish(callback);\n  };\n\n  return self;\n}\n\nmodule.exports = SnippetsFormatter;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/listener/summary_formatter.js":"function SummaryFormatter(options) {\n  var Cucumber = require('../../cucumber');\n  var Duration = require('duration');\n  var Table    = require('cli-table');\n  var path     = require('path');\n  var _        = require('lodash');\n\n  var failures = [];\n  var warnings = [];\n  var colors = Cucumber.Util.Colors(options.useColors);\n  var statusReportOrder = [\n    Cucumber.Status.FAILED,\n    Cucumber.Status.AMBIGUOUS,\n    Cucumber.Status.UNDEFINED,\n    Cucumber.Status.PENDING,\n    Cucumber.Status.SKIPPED,\n    Cucumber.Status.PASSED\n  ];\n\n  function indent(text, level) {\n    var indented;\n    text.split('\\n').forEach(function (line) {\n      var prefix = new Array(level + 1).join(' ');\n      line = (prefix + line).replace(/\\s+$/, '');\n      indented = (typeof(indented) === 'undefined' ? line : indented + '\\n' + line);\n    });\n    return indented;\n  }\n\n  var self = Cucumber.Listener.Formatter(options);\n\n  self.handleStepResultEvent = function handleStepResult(stepResult) {\n    var status = stepResult.getStatus();\n    switch (status) {\n      case Cucumber.Status.AMBIGUOUS:\n        self.storeAmbiguousStepResult(stepResult);\n        break;\n      case Cucumber.Status.FAILED:\n        self.storeFailedStepResult(stepResult);\n        break;\n      case Cucumber.Status.UNDEFINED:\n        self.storeUndefinedStepResult(stepResult);\n        break;\n      case Cucumber.Status.PENDING:\n        self.storePendingStepResult(stepResult);\n        break;\n    }\n  };\n\n  self.handleFeaturesResultEvent = function handleFeaturesResultEvent(featuresResult, callback) {\n    self.logSummary(featuresResult);\n    self.finish(callback);\n  };\n\n  self.storeAmbiguousStepResult = function storeAmbiguousStepResult(stepResult) {\n    var stepDefinitions = stepResult.getAmbiguousStepDefinitions();\n\n    var table = new Table({\n      chars: {\n        'bottom': '', 'bottom-left': '', 'bottom-mid': '', 'bottom-right': '',\n        'left': '', 'left-mid': '',\n        'mid': '', 'mid-mid': '',\n        'middle': ' - ',\n        'right': '', 'right-mid': '',\n        'top': '' , 'top-left': '', 'top-mid': '', 'top-right': ''\n      },\n      style: {\n        border: [], 'padding-left': 0, 'padding-right': 0\n      }\n    });\n    table.push.apply(table, stepDefinitions.map(function (stepDefinition) {\n      var pattern = stepDefinition.getPattern().toString();\n      var relativeUri = path.relative(process.cwd(), stepDefinition.getUri());\n      var line = stepDefinition.getLine();\n      return [pattern, relativeUri + ':' + line];\n    }));\n    failures.push({\n      stepResult: stepResult,\n      message: 'Multiple step definitions match:' + '\\n' + indent(table.toString(), 2)\n    });\n  };\n\n  self.storeFailedStepResult = function storeFailedStepResult(stepResult) {\n    var failureException = stepResult.getFailureException();\n    failures.push({\n      stepResult: stepResult,\n      message: failureException.stack || failureException\n    });\n  };\n\n  self.storeUndefinedStepResult = function storeUndefinedStepResult(stepResult) {\n    var step = stepResult.getStep();\n    var snippetBuilder = Cucumber.SupportCode.StepDefinitionSnippetBuilder(step, options.snippetSyntax);\n    var snippet = snippetBuilder.buildSnippet();\n    warnings.push({\n      stepResult: stepResult,\n      message: 'Undefined. Implement with the following snippet:' + '\\n\\n' + indent(snippet, 2)\n    });\n  };\n\n  self.storePendingStepResult = function storePendingStepResult(stepResult) {\n    var message = 'Pending';\n    var pendingReason = stepResult.getPendingReason();\n    if (pendingReason) {\n      message += ': ' + pendingReason;\n    }\n    warnings.push({\n      stepResult: stepResult,\n      message: message\n    });\n  };\n\n  self.logSummary = function logSummary(featuresResult) {\n    if (failures.length > 0) {\n      self.logFailures();\n    }\n\n    if (warnings.length > 0) {\n      self.logWarnings();\n    }\n\n    self.logScenariosSummary(featuresResult);\n    self.logStepsSummary(featuresResult);\n    self.logDuration(featuresResult);\n  };\n\n  self.logFailures = function logFailures() {\n    self.log('Failures:\\n\\n');\n    failures.forEach(function(failure, index) {\n      self.logIssue(index + 1, failure.stepResult, failure.message);\n    });\n  };\n\n  self.logWarnings = function logWarnings() {\n    self.log('Warnings:\\n\\n');\n    warnings.forEach(function(warning, index) {\n      self.logIssue(index + 1, warning.stepResult, warning.message);\n    });\n  };\n\n  self.logIssue = function logIssue(number, stepResult, message) {\n    var lines = [];\n    var prefix = number + ') ';\n    var step = stepResult.getStep();\n    var scenario = step.getScenario();\n    var colorFn = colors[stepResult.getStatus()];\n\n    if(scenario) {\n      var scenarioLocation = path.relative(process.cwd(), scenario.getUri()) + ':' + scenario.getLine();\n      var scenarioLine = 'Scenario: ' + colors.bold(scenario.getName()) + ' - ' + colors.location(scenarioLocation);\n      lines.push(prefix + scenarioLine);\n    } else {\n      lines.push(prefix + 'Background:');\n    }\n\n    var stepLine = 'Step: ' + colors.bold(step.getKeyword() + (step.getName() || ''));\n    if (step.hasUri()) {\n      var stepLocation = path.relative(process.cwd(), step.getUri()) + ':' + step.getLine();\n      stepLine += ' - ' + colors.location(stepLocation);\n    }\n    lines.push(indent(stepLine, prefix.length));\n\n    var stepDefintion = stepResult.getStepDefinition();\n    if (stepDefintion) {\n      var stepDefintionLocation = path.relative(process.cwd(), stepDefintion.getUri()) + ':' + stepDefintion.getLine();\n      var stepDefinitionLine = 'Step Definition: ' + colors.location(stepDefintionLocation);\n      lines.push(indent(stepDefinitionLine, prefix.length));\n    }\n\n    var header = lines.join('\\n');\n    var messageText = indent('Message: ', prefix.length) + '\\n' + indent(colorFn(message), prefix.length + 2);\n\n    self.log(header + '\\n' + messageText + '\\n\\n');\n  };\n\n  self.logScenariosSummary = function logScenariosSummary(featuresResult) {\n    self.logCountSummary('scenario', featuresResult.getScenarioCounts());\n  };\n\n  self.logStepsSummary = function logStepsSummary(featuresResult) {\n    self.logCountSummary('step', featuresResult.getStepCounts());\n  };\n\n  self.logDuration = function logDuration(featuresResult) {\n    var nanoseconds = featuresResult.getDuration();\n    var milliseconds = Math.ceil(nanoseconds / 1e6);\n    var start = new Date(0);\n    var end = new Date(milliseconds);\n    var duration = new Duration(start, end);\n\n    self.log(duration.minutes + 'm' +\n             duration.toString('%S') + '.' +\n             duration.toString('%L') + 's' + '\\n');\n  };\n\n  self.logUndefinedStepSnippets = function logUndefinedStepSnippets() {\n    var undefinedStepLogBuffer = self.getUndefinedStepLogBuffer();\n    if (options.snippets) {\n      self.log(colors.pending('\\nYou can implement step definitions for undefined steps with these snippets:\\n\\n'));\n      self.log(colors.pending(undefinedStepLogBuffer));\n    }\n  };\n\n  self.logCountSummary = function logCountSummary (type, counts) {\n    var total = _.reduce(counts, function(memo, value){\n      return memo + value;\n    });\n\n    self.log(total + ' ' + type + (total !== 1 ? 's' : ''));\n    if (total > 0) {\n      var details = [];\n      statusReportOrder.forEach(function (status) {\n        if (counts[status] > 0)\n          details.push(colors[status](counts[status] + ' ' + status));\n      });\n      self.log(' (' + details.join(', ') + ')');\n    }\n    self.log('\\n');\n  };\n\n  return self;\n}\n\nmodule.exports = SummaryFormatter;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/parser.js":"function Parser(featureSources, astFilter) {\n  var Gherkin      = require('gherkin');\n  var Cucumber     = require('../cucumber');\n\n  var parser = new Gherkin.Parser();\n  var compiler = new Gherkin.Compiler();\n\n  var self = {\n    parse: function parse() {\n      var features = [];\n\n      featureSources.forEach(function (featureSource) {\n        var uri    = featureSource[Parser.FEATURE_NAME_SOURCE_PAIR_URI_INDEX];\n        var source = featureSource[Parser.FEATURE_NAME_SOURCE_PAIR_SOURCE_INDEX];\n\n        var gherkinDocument;\n        try {\n          gherkinDocument = parser.parse(source);\n        } catch(e) {\n          e.message += '\\npath: ' + uri;\n          throw e;\n        }\n\n        var pickles = compiler.compile(gherkinDocument);\n        var scenarios = [];\n        pickles.forEach(function (pickleData) {\n          var scenario = Cucumber.Ast.Scenario(pickleData, uri);\n          if (astFilter.isElementEnrolled(scenario)) {\n            scenarios.push(scenario);\n          }\n        });\n\n        if (scenarios.length > 0) {\n          features.push(Cucumber.Ast.Feature(gherkinDocument.feature, uri, scenarios));\n        }\n      });\n\n      return features;\n    }\n  };\n  return self;\n}\n\nParser.FEATURE_NAME_SOURCE_PAIR_URI_INDEX = 0;\nParser.FEATURE_NAME_SOURCE_PAIR_SOURCE_INDEX = 1;\n\nmodule.exports = Parser;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/runtime.js":"function Runtime(configuration) {\n  var Cucumber = require('../cucumber');\n\n  var listeners = [];\n\n  var self = {\n    start: function start(callback) {\n      if (typeof(callback) !== 'function')\n        throw new Error(Runtime.START_MISSING_CALLBACK_ERROR);\n\n      var features = self.getFeatures();\n      var supportCodeLibrary = self.getSupportCodeLibrary();\n      var options = {\n        dryRun: configuration.isDryRunRequested && configuration.isDryRunRequested(),\n        failFast: configuration.isFailFastRequested && configuration.isFailFastRequested(),\n        strict: configuration.isStrictRequested && configuration.isStrictRequested(),\n        worldParameters: configuration.getWorldParameters()\n      };\n\n      var featuresRunner = Runtime.FeaturesRunner(features, supportCodeLibrary, listeners, options);\n\n      if (configuration.shouldFilterStackTraces())\n        Runtime.StackTraceFilter.filter();\n\n      featuresRunner.run(function (result) {\n        Runtime.StackTraceFilter.unfilter();\n        callback(result);\n      });\n    },\n\n    attachListener: function attachListener(listener) {\n      listeners.push(listener);\n    },\n\n    getFeatures: function getFeatures() {\n      var featureSources = configuration.getFeatureSources();\n      var astFilter      = configuration.getAstFilter();\n      var parser         = Cucumber.Parser(featureSources, astFilter);\n      var features       = parser.parse();\n      return features;\n    },\n\n    getSupportCodeLibrary: function getSupportCodeLibrary() {\n      var supportCodeLibrary = configuration.getSupportCodeLibrary();\n      return supportCodeLibrary;\n    }\n  };\n  return self;\n}\n\nRuntime.START_MISSING_CALLBACK_ERROR = 'Cucumber.Runtime.start() expects a callback';\nRuntime.Attachment                   = require('./runtime/attachment');\nRuntime.Event                        = require('./runtime/event');\nRuntime.EventBroadcaster             = require('./runtime/event_broadcaster');\nRuntime.FeaturesResult               = require('./runtime/features_result');\nRuntime.FeaturesRunner               = require('./runtime/features_runner');\nRuntime.ScenarioResult               = require('./runtime/scenario_result');\nRuntime.ScenarioRunner               = require('./runtime/scenario_runner');\nRuntime.StackTraceFilter             = require('./runtime/stack_trace_filter');\nRuntime.StepResult                   = require('./runtime/step_result');\n\nmodule.exports = Runtime;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/runtime/attachment.js":"function Attachment(payload) {\n  var self = {\n    getMimeType:  function getMimeType()  { return payload.mimeType; },\n    getData:      function getData()      { return payload.data; }\n  };\n\n  return self;\n}\n\nmodule.exports = Attachment;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/runtime/event.js":"var deprecatedMessageDisplayed = false;\n\nfunction Event(name, payload) {\n  var Cucumber = require('../../cucumber');\n\n  function buildBeforeEventName(eventName) {\n    return Cucumber.Events.getBeforeEvent(eventName);\n  }\n\n  function buildAfterEventName(eventName) {\n    return Cucumber.Events.getAfterEvent(eventName);\n  }\n\n  payload.getPayloadItem = function getPayloadItem() {\n    if (!deprecatedMessageDisplayed) {\n      console.warn(\n        'cucumber event handlers attached via registerHandler are now passed the' +\n        ' associated object instead of an event' +\n        '\\ngetPayloadItem will be removed in the next major release'\n      );\n      deprecatedMessageDisplayed = true;\n    }\n    return payload;\n  };\n\n  var self = {\n    getName: function getName() {\n      return name;\n    },\n\n    getPayload: function getPayload() {\n      return payload;\n    },\n\n    replicateAsPreEvent: function replicateAsPreEvent() {\n      var newName = buildBeforeEventName(name);\n      return Cucumber.Runtime.Event(newName, payload);\n    },\n\n    replicateAsPostEvent: function replicateAsPostEvent() {\n      var newName = buildAfterEventName(name);\n      return Cucumber.Runtime.Event(newName, payload);\n    },\n\n    occurredOn: function occurredOn(eventName) {\n      return eventName === name;\n    },\n\n    occurredAfter: function occurredAfter(eventName) {\n      var afterEventName = buildAfterEventName(eventName);\n      return afterEventName === name;\n    }\n  };\n\n  return self;\n}\n\nmodule.exports = Event;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/runtime/event_broadcaster.js":"function EventBroadcaster(listeners, listenerDefaultTimeout) {\n  var Cucumber = require('../../cucumber');\n\n  var self = {\n    broadcastAroundEvent: function broadcastAroundEvent(event, userFunction, callback) {\n      self.broadcastBeforeEvent(event, function() {\n        userFunction(function() {\n          var userFunctionCallbackArguments = arguments;\n          self.broadcastAfterEvent(event, function() {\n            callback.apply(null, userFunctionCallbackArguments);\n          });\n        });\n      });\n    },\n\n    broadcastBeforeEvent: function broadcastBeforeEvent(event, callback) {\n      var preEvent = event.replicateAsPreEvent();\n      self.broadcastEvent(preEvent, callback);\n    },\n\n    broadcastAfterEvent: function broadcastAfterEvent(event, callback) {\n      var postEvent = event.replicateAsPostEvent();\n      self.broadcastEvent(postEvent, callback);\n    },\n\n    broadcastEvent: function broadcastEvent(event, callback) {\n      Cucumber.Util.asyncForEach(listeners, function (listener, callback) {\n        listener.hear(event, listenerDefaultTimeout, function(error) {\n          if (error) {\n            throw error;\n          }\n          callback();\n        });\n      }, callback);\n    }\n  };\n\n  return self;\n}\n\nmodule.exports = EventBroadcaster;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/runtime/features_result.js":"function FeaturesResult(strict) {\n  var Cucumber = require('../../cucumber');\n  var _ = require('lodash');\n\n  var duration = 0;\n  var scenarioCounts = Cucumber.Status.getMapping(0);\n  var stepCounts = Cucumber.Status.getMapping(0);\n\n  var self = {\n    getDuration: function getDuration() {\n      return duration;\n    },\n\n    getScenarioCounts: function getScenarioCounts() {\n      return _.clone(scenarioCounts);\n    },\n\n    getStepCounts: function getStepCounts() {\n      return _.clone(stepCounts);\n    },\n\n    isSuccessful: function isSuccessful() {\n      if (scenarioCounts[Cucumber.Status.FAILED] > 0 || scenarioCounts[Cucumber.Status.AMBIGUOUS] > 0) {\n        return false;\n      }\n      if (strict && (scenarioCounts[Cucumber.Status.PENDING] > 0 || scenarioCounts[Cucumber.Status.UNDEFINED] > 0)) {\n        return false;\n      }\n      return true;\n    },\n\n    witnessScenarioResult: function witnessScenarioResult(scenarioResult) {\n      duration += scenarioResult.getDuration();\n      scenarioCounts[scenarioResult.getStatus()] += 1;\n      _.mergeWith(stepCounts, scenarioResult.getStepCounts(), function(a, b) { return a + b; });\n    }\n  };\n\n  return self;\n}\n\nmodule.exports = FeaturesResult;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/runtime/features_runner.js":"function FeaturesRunner(features, supportCodeLibrary, listeners, options) {\n  var Cucumber = require('../../cucumber');\n\n  var allListeners = listeners.concat(supportCodeLibrary.getListeners());\n  var eventBroadcaster = Cucumber.Runtime.EventBroadcaster(allListeners, supportCodeLibrary.getDefaultTimeout());\n  var featuresResult = Cucumber.Runtime.FeaturesResult(options.strict);\n\n  var self = {\n    run: function run(callback) {\n      var event = Cucumber.Runtime.Event(Cucumber.Events.FEATURES_EVENT_NAME, features);\n      eventBroadcaster.broadcastAroundEvent(\n        event,\n        function (callback) {\n          Cucumber.Util.asyncForEach(features, self.runFeature, function() {\n            self.broadcastFeaturesResult(callback);\n          });\n        },\n        function() {\n          callback(featuresResult.isSuccessful());\n        }\n      );\n    },\n\n    broadcastFeaturesResult: function visitFeaturesResult(callback) {\n      var event = Cucumber.Runtime.Event(Cucumber.Events.FEATURES_RESULT_EVENT_NAME, featuresResult);\n      eventBroadcaster.broadcastEvent(event, callback);\n    },\n\n    runFeature: function runFeature(feature, callback) {\n      if (!featuresResult.isSuccessful() && options.failFast) {\n        return callback();\n      }\n      var event = Cucumber.Runtime.Event(Cucumber.Events.FEATURE_EVENT_NAME, feature);\n      eventBroadcaster.broadcastAroundEvent(\n        event,\n        function (callback) {\n          Cucumber.Util.asyncForEach(feature.getScenarios(), self.runScenario, callback);\n        },\n        callback\n      );\n    },\n\n    runScenario: function runScenario(scenario, callback) {\n      if (!featuresResult.isSuccessful() && options.failFast) {\n        return callback();\n      }\n\n      var scenarioRunner = Cucumber.Runtime.ScenarioRunner(scenario, supportCodeLibrary, eventBroadcaster, options);\n      scenarioRunner.run(function(scenarioResult) {\n        featuresResult.witnessScenarioResult(scenarioResult);\n        callback();\n      });\n    }\n  };\n  return self;\n}\n\nmodule.exports = FeaturesRunner;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/runtime/scenario_result.js":"function ScenarioResult(scenario) {\n  var Cucumber = require('../../cucumber');\n  var _ = require('lodash');\n\n  var duration = 0;\n  var status = Cucumber.Status.PASSED;\n  var stepCounts = Cucumber.Status.getMapping(0);\n  var failureException = null;\n\n  var shouldUpdateStatus = function shouldUpdateStatus(stepStatus) {\n    switch (stepStatus) {\n      case Cucumber.Status.FAILED:\n        return true;\n      case Cucumber.Status.AMBIGUOUS:\n      case Cucumber.Status.PENDING:\n      case Cucumber.Status.SKIPPED:\n      case Cucumber.Status.UNDEFINED:\n        return status === Cucumber.Status.PASSED;\n      default:\n        return false;\n    }\n  };\n\n  var self = {\n    getDuration: function getDuration() {\n      return duration;\n    },\n\n    getFailureException: function getFailureException() {\n      return failureException;\n    },\n\n    getScenario: function getScenario() {\n      return scenario;\n    },\n\n    getStepCounts: function getStepCounts() {\n      return _.clone(stepCounts);\n    },\n\n    getStatus: function getStatus() {\n      return status;\n    },\n\n    witnessStepResult: function witnessStepResult(stepResult) {\n      var stepDuration = stepResult.getDuration();\n      if (stepDuration) {\n        duration += stepDuration;\n      }\n      var stepStatus = stepResult.getStatus();\n      if (shouldUpdateStatus(stepStatus)) {\n        status = stepStatus;\n      }\n      if (stepStatus === Cucumber.Status.FAILED) {\n        failureException = stepResult.getFailureException();\n      }\n      var step = stepResult.getStep();\n      if (!step.isHidden()) {\n        stepCounts[stepStatus] += 1;\n      }\n    }\n  };\n\n  return self;\n}\n\nmodule.exports = ScenarioResult;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/runtime/scenario_runner.js":"function ScenarioRunner(scenario, supportCodeLibrary, eventBroadcaster, options) {\n  var Cucumber = require('../../cucumber');\n\n  var scenarioResult = Cucumber.Runtime.ScenarioResult(scenario);\n  var apiScenario = Cucumber.Api.Scenario(scenario, scenarioResult);\n  var defaultTimeout = supportCodeLibrary.getDefaultTimeout();\n  var world = supportCodeLibrary.instantiateNewWorld(options.worldParameters);\n\n  var self = {\n    run: function run(callback) {\n      var event = Cucumber.Runtime.Event(Cucumber.Events.SCENARIO_EVENT_NAME, scenario);\n      eventBroadcaster.broadcastAroundEvent(\n        event,\n        function (callback) {\n          self.runBeforeHooks(function () {\n            self.runSteps(function() {\n              self.runAfterHooks(function(){\n                self.broadcastScenarioResult(callback);\n              });\n            });\n          });\n        },\n        function() {\n          callback(scenarioResult);\n        }\n      );\n    },\n\n    runBeforeHooks: function runBeforeHooks(callback) {\n      var beforeHooks = supportCodeLibrary.lookupBeforeHooksByScenario(scenario);\n      Cucumber.Util.asyncForEach(beforeHooks, function(beforeHook, callback) {\n        var beforeStep = Cucumber.Ast.HookStep(Cucumber.Ast.HookStep.BEFORE_STEP_KEYWORD);\n        beforeStep.setScenario(scenario);\n        self.runHookStep(beforeStep, beforeHook, callback);\n      }, callback);\n    },\n\n    runSteps: function runSteps(callback) {\n      Cucumber.Util.asyncForEach(scenario.getSteps(), self.runStep, callback);\n    },\n\n    runAfterHooks: function runAfterHooks(callback) {\n      var afterHooks = supportCodeLibrary.lookupAfterHooksByScenario(scenario).reverse();\n      Cucumber.Util.asyncForEach(afterHooks, function(afterHook, callback) {\n        var afterStep = Cucumber.Ast.HookStep(Cucumber.Ast.HookStep.AFTER_STEP_KEYWORD);\n        afterStep.setScenario(scenario);\n        self.runHookStep(afterStep, afterHook, callback);\n      }, callback);\n    },\n\n    broadcastScenarioResult: function broadcastScenarioResult(callback) {\n      var event = Cucumber.Runtime.Event(Cucumber.Events.SCENARIO_RESULT_EVENT_NAME, scenarioResult);\n      eventBroadcaster.broadcastEvent(event, callback);\n    },\n\n    runStep: function runStep(step, callback) {\n      var event = Cucumber.Runtime.Event(Cucumber.Events.STEP_EVENT_NAME, step);\n      eventBroadcaster.broadcastAroundEvent(\n        event,\n        function (callback) {\n          process.nextTick(function() {\n            self.processStep(step, callback);\n          });\n        },\n        callback\n      );\n    },\n\n    runHookStep: function(step, hook, callback) {\n      var event = Cucumber.Runtime.Event(Cucumber.Events.STEP_EVENT_NAME, step);\n      eventBroadcaster.broadcastAroundEvent(\n        event,\n        function (callback) {\n          if (options.dryRun) {\n            self.skipStep(step, hook, callback);\n          } else {\n            self.executeStep(step, hook, callback);\n          }\n        },\n        callback\n      );\n    },\n\n    broadcastStepResult: function broadcastStepResult(stepResult, callback) {\n      scenarioResult.witnessStepResult(stepResult);\n      var event = Cucumber.Runtime.Event(Cucumber.Events.STEP_RESULT_EVENT_NAME, stepResult);\n      eventBroadcaster.broadcastEvent(event, callback);\n    },\n\n    isSkippingSteps: function isSkippingSteps() {\n      return scenarioResult.getStatus() !== Cucumber.Status.PASSED;\n    },\n\n    processStep: function processStep(step, callback) {\n      var stepName = step.getName();\n      var stepDefinitions = supportCodeLibrary.lookupStepDefinitionsByName(stepName);\n      if (stepDefinitions.length === 0) {\n        self.skipUndefinedStep(step, callback);\n      } else if (stepDefinitions.length > 1) {\n        self.skipAmbiguousStep(step, stepDefinitions, callback);\n      } else if (options.dryRun || self.isSkippingSteps()) {\n        self.skipStep(step, stepDefinitions[0], callback);\n      } else {\n        self.executeStep(step, stepDefinitions[0], callback);\n      }\n    },\n\n    executeStep: function executeStep(step, stepDefinition, callback) {\n      stepDefinition.invoke(step, world, apiScenario, defaultTimeout, function (stepResult) {\n        apiScenario.clearAttachments();\n        self.broadcastStepResult(stepResult, callback);\n      });\n    },\n\n    skipAmbiguousStep: function skipAmbiguousStep(step, stepDefinitions, callback) {\n      var ambiguousStepResult = Cucumber.Runtime.StepResult({\n        ambiguousStepDefinitions: stepDefinitions,\n        step: step,\n        status: Cucumber.Status.AMBIGUOUS\n      });\n      self.broadcastStepResult(ambiguousStepResult, callback);\n    },\n\n    skipStep: function skipStep(step, stepDefinition, callback) {\n      var skippedStepResult = Cucumber.Runtime.StepResult({\n        step: step,\n        stepDefinition: stepDefinition,\n        status: Cucumber.Status.SKIPPED\n      });\n      self.broadcastStepResult(skippedStepResult, callback);\n    },\n\n    skipUndefinedStep: function skipUndefinedStep(step, callback) {\n      var undefinedStepResult = Cucumber.Runtime.StepResult({step: step, status: Cucumber.Status.UNDEFINED});\n      self.broadcastStepResult(undefinedStepResult, callback);\n    }\n  };\n\n  return self;\n}\n\nmodule.exports = ScenarioRunner;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/runtime/stack_trace_filter.js":"var path = require('path');\nvar chain = require('stack-chain');\nvar _ = require('lodash');\n\nvar currentFilter = null;\nvar cucumberPath = path.join(__dirname, '..');\n\nfunction isFrameInCucumber(frame) {\n  var fileName = frame.getFileName() || '';\n  return fileName.indexOf(cucumberPath) !== -1;\n}\n\nfunction filter() {\n  currentFilter = chain.filter.attach(function (error, frames) {\n    if (frames.length > 0 && isFrameInCucumber(frames[0])) {\n      return frames;\n    }\n    return frames.filter(_.negate(isFrameInCucumber));\n  });\n}\n\nfunction unfilter() {\n  chain.filter.deattach(currentFilter);\n}\n\nmodule.exports = {\n  filter: filter,\n  unfilter: unfilter\n};\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/runtime/step_result.js":"function StepResult(payload) {\n  var self = {\n    getAmbiguousStepDefinitions: function getAmbiguousStepDefinitions() {\n      return payload.ambiguousStepDefinitions;\n    },\n\n    getAttachments: function getAttachments() {\n      return payload.attachments;\n    },\n\n    getDuration: function getDuration() {\n      return payload.duration;\n    },\n\n    getFailureException: function getFailureException() {\n      return payload.failureException;\n    },\n\n    getPendingReason: function getPendingReason() {\n      return payload.pendingReason;\n    },\n\n    getStep: function getStep() {\n      return payload.step;\n    },\n\n    getStepDefinition: function getStepDefinition() {\n      return payload.stepDefinition;\n    },\n\n    getStatus: function getStatus() {\n      return payload.status;\n    },\n\n    hasAttachments: function hasAttachments() {\n      return payload.attachments && payload.attachments.length > 0;\n    }\n  };\n\n  return self;\n}\n\nmodule.exports = StepResult;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/status.js":"var Status = {};\n\nStatus.AMBIGUOUS = 'ambiguous';\nStatus.FAILED = 'failed';\nStatus.PENDING = 'pending';\nStatus.PASSED = 'passed';\nStatus.SKIPPED = 'skipped';\nStatus.UNDEFINED = 'undefined';\n\nStatus.getMapping = function getMapping(initialValue) {\n  var statuses = [\n    Status.AMBIGUOUS,\n    Status.FAILED,\n    Status.PASSED,\n    Status.PENDING,\n    Status.SKIPPED,\n    Status.UNDEFINED\n  ];\n  var counts = {};\n  statuses.forEach(function (status) {\n    counts[status] = initialValue;\n  });\n  return counts;\n};\n\nmodule.exports = Status;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/support_code.js":"var SupportCode                          = {};\nSupportCode.Hook                         = require('./support_code/hook');\nSupportCode.Library                      = require('./support_code/library');\nSupportCode.StepDefinition               = require('./support_code/step_definition');\nSupportCode.StepDefinitionSnippetBuilder = require('./support_code/step_definition_snippet_builder');\nmodule.exports                           = SupportCode;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/support_code/hook.js":"function Hook(code, options, uri, line) {\n  var Cucumber = require('../../cucumber');\n  var self = Cucumber.SupportCode.StepDefinition(Hook.EMPTY_PATTERN, options, code, uri, line);\n  var tags = options.tags || [];\n\n  self.buildInvocationParameters = function buildInvocationParameters(step, scenario) {\n    return [scenario];\n  };\n\n  self.appliesToScenario = function appliesToScenario(scenario) {\n    var astFilter = self.getAstFilter();\n    return astFilter.isElementEnrolled(scenario);\n  };\n\n  self.getAstFilter = function getAstFilter() {\n    var tagGroups = Cucumber.TagGroupParser.getTagGroupsFromStrings(tags);\n    var rules = tagGroups.map(function (tagGroup) {\n      var rule = Cucumber.Ast.Filter.AnyOfTagsRule(tagGroup);\n      return rule;\n    });\n    var astFilter = Cucumber.Ast.Filter(rules);\n    return astFilter;\n  };\n\n  self.validCodeLengths = function validCodeLengths () {\n    return [0, 1, 2];\n  };\n\n  self.invalidCodeLengthMessage = function invalidCodeLengthMessage() {\n    return self.buildInvalidCodeLengthMessage('0 or 1', '2');\n  };\n\n  return self;\n}\n\nHook.EMPTY_PATTERN = '';\n\nmodule.exports = Hook;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/support_code/library.js":"function Library(supportCodeDefinition) {\n  var Cucumber = require('../../cucumber');\n  var StackTrace = require('stacktrace-js');\n  var _ = require('lodash');\n\n  var listeners = [];\n  var stepDefinitions = [];\n  var beforeHooks = [];\n  var afterHooks = [];\n  var World = function World(parameters) {\n    this.parameters = parameters;\n  };\n  var defaultTimeout= 5 * 1000;\n\n  function createEventListenerMethod(library, eventName) {\n    return function (handler) {\n      library.registerHandler(eventName, handler);\n    };\n  }\n\n  function appendEventHandlers(supportCodeHelper, library) {\n    _.each(Cucumber.Events.ALL, function(eventName) {\n      supportCodeHelper[eventName] = createEventListenerMethod(library, eventName);\n    });\n  }\n\n  function getStackframe() {\n    var stackframes = StackTrace.getSync();\n    if (stackframes.length > 2) {\n      return stackframes[2];\n    } else {\n      return stackframes[0];\n    }\n  }\n\n  var self = {\n    lookupBeforeHooksByScenario: function lookupBeforeHooksByScenario(scenario) {\n      return self.lookupHooksByScenario(beforeHooks, scenario);\n    },\n\n    lookupAfterHooksByScenario: function lookupBeforeHooksByScenario(scenario) {\n      return self.lookupHooksByScenario(afterHooks, scenario);\n    },\n\n    lookupHooksByScenario: function lookupHooksByScenario(hooks, scenario) {\n      return hooks.filter(function (hook) {\n        return hook.appliesToScenario(scenario);\n      });\n    },\n\n    lookupStepDefinitionsByName: function lookupStepDefinitionsByName(name) {\n      return stepDefinitions.filter(function (stepDefinition) {\n        return stepDefinition.matchesStepName(name);\n      });\n    },\n\n    defineHook: function defineHook(builder, collection) {\n      return function(options, code) {\n        if (typeof(options) === 'string') {\n          options = {tags: [options]};\n        } else if (typeof(options) === 'function') {\n          code = options;\n          options = {};\n        }\n        var stackframe = getStackframe();\n        var line = stackframe.getLineNumber();\n        var uri = stackframe.getFileName() || 'unknown';\n        var hook = builder(code, options, uri, line);\n        collection.push(hook);\n      };\n    },\n\n    defineStep: function defineStep(name, options, code) {\n      if (typeof(options) === 'function') {\n        code = options;\n        options = {};\n      }\n      var stackframe = getStackframe();\n      var line = stackframe.getLineNumber();\n      var uri = stackframe.getFileName() || 'unknown';\n      var stepDefinition = Cucumber.SupportCode.StepDefinition(name, options, code, uri, line);\n      stepDefinitions.push(stepDefinition);\n    },\n\n    registerListener: function registerListener(listener) {\n      listeners.push(listener);\n    },\n\n    registerHandler: function registerHandler(eventName, options, handler) {\n      if (typeof(options) === 'function') {\n        handler = options;\n        options = {};\n      }\n      var stackframe = getStackframe();\n      options.line = stackframe.getLineNumber();\n      options.uri = stackframe.getFileName() || 'unknown';\n      var listener = Cucumber.Listener(options);\n      listener.setHandlerForEvent(eventName, handler);\n      self.registerListener(listener);\n    },\n\n    getListeners: function getListeners() {\n      return listeners;\n    },\n\n    instantiateNewWorld: function instantiateNewWorld(parameters) {\n      return new World(parameters);\n    },\n\n    getDefaultTimeout: function getDefaultTimeout() {\n      return defaultTimeout;\n    },\n\n    setDefaultTimeout: function setDefaultTimeout(milliseconds) {\n      defaultTimeout = milliseconds;\n    }\n  };\n\n  var supportCodeHelper = {\n    Before            : self.defineHook(Cucumber.SupportCode.Hook, beforeHooks),\n    After             : self.defineHook(Cucumber.SupportCode.Hook, afterHooks),\n    Given             : self.defineStep,\n    When              : self.defineStep,\n    Then              : self.defineStep,\n    defineStep        : self.defineStep,\n    registerListener  : self.registerListener,\n    registerHandler   : self.registerHandler,\n    setDefaultTimeout : self.setDefaultTimeout,\n    World             : World\n  };\n\n  appendEventHandlers(supportCodeHelper, self);\n  supportCodeDefinition.call(supportCodeHelper);\n  World = supportCodeHelper.World;\n\n  return self;\n}\n\nmodule.exports = Library;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/support_code/step_definition.js":"function StepDefinition(pattern, options, code, uri, line) {\n  var Cucumber = require('../../cucumber');\n\n\n  function time() {\n    if (typeof process !== 'undefined' && process.hrtime) {\n      return process.hrtime();\n    }\n    else {\n      return new Cucumber.Util.RealTime.Date().getTime();\n    }\n  }\n\n  function durationInNanoseconds(start) {\n    if (typeof process !== 'undefined' && process.hrtime) {\n      var duration = process.hrtime(start);\n      return duration[0] * 1e9 + duration[1];\n    }\n    else {\n      return (new Cucumber.Util.RealTime.Date().getTime() - start) * 1e6;\n    }\n  }\n\n  var self = {\n    getLine: function getLine() {\n      return line;\n    },\n\n    getPattern: function getPatternRegexp() {\n      return pattern;\n    },\n\n    getPatternRegexp: function getPatternRegexp() {\n      var regexp;\n      if (pattern.replace) {\n        var regexpString = pattern\n          .replace(StepDefinition.UNSAFE_STRING_CHARACTERS_REGEXP, StepDefinition.PREVIOUS_REGEXP_MATCH)\n          .replace(StepDefinition.QUOTED_DOLLAR_PARAMETER_REGEXP, StepDefinition.QUOTED_DOLLAR_PARAMETER_SUBSTITUTION)\n          .replace(StepDefinition.DOLLAR_PARAMETER_REGEXP, StepDefinition.DOLLAR_PARAMETER_SUBSTITUTION);\n        regexpString =\n          StepDefinition.STRING_PATTERN_REGEXP_PREFIX +\n          regexpString +\n          StepDefinition.STRING_PATTERN_REGEXP_SUFFIX;\n        regexp = new RegExp(regexpString);\n      }\n      else\n        regexp = pattern;\n      return regexp;\n    },\n\n    getUri: function getUri() {\n      return uri;\n    },\n\n    matchesStepName: function matchesStepName(stepName) {\n      var regexp = self.getPatternRegexp();\n      return regexp.test(stepName);\n    },\n\n    invoke: function invoke(step, world, scenario, defaultTimeout, callback) {\n      var start = time();\n      var parameters = self.buildInvocationParameters(step, scenario);\n      var timeoutInMilliseconds = options.timeout || defaultTimeout;\n\n      function finish(error, result) {\n        var stepResultData = {\n          step: step,\n          stepDefinition: self,\n          duration: durationInNanoseconds(start),\n          attachments: scenario.getAttachments(),\n        };\n\n        if (result === 'pending') {\n          stepResultData.status = Cucumber.Status.PENDING;\n        } else if (error) {\n          stepResultData.failureException = error;\n          stepResultData.status = Cucumber.Status.FAILED;\n        } else {\n          stepResultData.status = Cucumber.Status.PASSED;\n        }\n\n        var stepResult = Cucumber.Runtime.StepResult(stepResultData);\n        callback(stepResult);\n      }\n\n      var validCodeLengths = self.validCodeLengths(parameters);\n      if (validCodeLengths.indexOf(code.length) === -1) {\n        return finish(self.invalidCodeLengthMessage(parameters));\n      }\n\n      Cucumber.Util.run(code, world, parameters, timeoutInMilliseconds, finish);\n    },\n\n    buildInvocationParameters: function buildInvocationParameters(step) {\n      var stepName      = step.getName();\n      var patternRegexp = self.getPatternRegexp();\n      var parameters    = patternRegexp.exec(stepName);\n      parameters.shift();\n      parameters = parameters.concat(step.getArguments().map(function(arg) {\n        switch (arg.getType()) {\n          case 'DataTable':\n            return arg;\n          case 'DocString':\n            return arg.getContent();\n          default:\n            throw new Error('Unknown argument type:' + arg.getType());\n        }\n      }));\n      return parameters;\n    },\n\n    buildExceptionHandlerToCodeCallback: function buildExceptionHandlerToCodeCallback(codeCallback) {\n      var exceptionHandler = function handleScenarioException(exception) {\n        if (exception)\n          Cucumber.Debug.warn(exception.stack || exception, 'exception inside feature', 3);\n        codeCallback(exception);\n      };\n      return exceptionHandler;\n    },\n\n    validCodeLengths: function validCodeLengths (parameters) {\n      return [parameters.length, parameters.length + 1];\n    },\n\n    invalidCodeLengthMessage: function invalidCodeLengthMessage(parameters) {\n      return self.buildInvalidCodeLengthMessage(parameters.length, parameters.length + 1);\n    },\n\n    buildInvalidCodeLengthMessage: function buildInvalidCodeLengthMessage(syncOrPromiseLength, callbackLength) {\n      return 'function has ' + code.length + ' arguments' +\n          ', should have ' + syncOrPromiseLength + ' (if synchronous or returning a promise)' +\n          ' or '  + callbackLength + ' (if accepting a callback)';\n    }\n  };\n  return self;\n}\n\nStepDefinition.DOLLAR_PARAMETER_REGEXP              = /\\$[a-zA-Z_-]+/g;\nStepDefinition.DOLLAR_PARAMETER_SUBSTITUTION        = '(.*)';\nStepDefinition.PREVIOUS_REGEXP_MATCH                = '\\\\$&';\nStepDefinition.QUOTED_DOLLAR_PARAMETER_REGEXP       = /\"\\$[a-zA-Z_-]+\"/g;\nStepDefinition.QUOTED_DOLLAR_PARAMETER_SUBSTITUTION = '\"([^\"]*)\"';\nStepDefinition.STRING_PATTERN_REGEXP_PREFIX         = '^';\nStepDefinition.STRING_PATTERN_REGEXP_SUFFIX         = '$';\nStepDefinition.UNSAFE_STRING_CHARACTERS_REGEXP      = /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\|]/g;\nStepDefinition.UNKNOWN_STEP_FAILURE_MESSAGE         = 'Step failure';\n\nmodule.exports = StepDefinition;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/support_code/step_definition_snippet_builder.js":"var _  = require('lodash');\n\nvar NUMBER_PATTERN        = /\\d+/gi;\nvar NUMBER_MATCHING_GROUP = '(\\\\d+)';\n\nvar QUOTED_STRING_PATTERN        = /\"[^\"]*\"/gi;\nvar QUOTED_STRING_MATCHING_GROUP = '\"([^\"]*)\"';\n\nfunction StepDefinitionSnippetBuilder(step, syntax) {\n  var Cucumber = require('../../cucumber');\n\n  var self = {\n    buildSnippet: function buildSnippet() {\n      var functionName = self.buildStepDefinitionFunctionName();\n      var pattern      = self.buildStepDefinitionPattern();\n      var parameters   = self.buildStepDefinitionParameters();\n      var comment      = 'Write code here that turns the phrase above into concrete actions';\n      return syntax.build(functionName, pattern, parameters, comment);\n    },\n\n    buildStepDefinitionFunctionName: function buildStepDefinitionFunctionName() {\n      if (step.isOutcomeStep())\n        return 'Then';\n      else if (step.isEventStep())\n        return 'When';\n      else\n        return 'Given';\n    },\n\n    buildStepDefinitionPattern: function buildStepDefinitionPattern() {\n      var stepName              = step.getName();\n      var escapedStepName       = Cucumber.Util.RegExp.escapeString(stepName);\n      var parameterizedStepName = self.parameterizeStepName(escapedStepName);\n      var pattern               = '/^' + parameterizedStepName + '$/';\n      return pattern;\n    },\n\n    buildStepDefinitionParameters: function buildStepDefinitionParameters() {\n      var parameters = self.getStepDefinitionPatternMatchingGroupParameters();\n      step.getArguments().forEach(function (arg) {\n        switch (arg.getType()) {\n          case 'DataTable':\n            parameters.push('table');\n            break;\n          case 'DocString':\n            parameters.push('string');\n            break;\n          default:\n            throw new Error('Unknown argument type:' + arg.getType());\n        }\n      });\n      parameters.push('callback');\n      return parameters;\n    },\n\n    getStepDefinitionPatternMatchingGroupParameters: function getStepDefinitionPatternMatchingGroupParameters() {\n      var parameterCount = self.countStepDefinitionPatternMatchingGroups();\n      var parameters = _.times(parameterCount, function (n) {\n        return 'arg' + (n + 1);\n      });\n      return parameters;\n    },\n\n    countStepDefinitionPatternMatchingGroups: function countStepDefinitionPatternMatchingGroups() {\n      var stepDefinitionPattern    = self.buildStepDefinitionPattern();\n      var numberMatchingGroupCount = Cucumber.Util.String.count(stepDefinitionPattern, NUMBER_MATCHING_GROUP);\n      var quotedStringMatchingGroupCount = Cucumber.Util.String.count(stepDefinitionPattern, QUOTED_STRING_MATCHING_GROUP);\n      var count = numberMatchingGroupCount + quotedStringMatchingGroupCount;\n      return count;\n    },\n\n    parameterizeStepName: function parameterizeStepName(stepName) {\n      var parameterizedStepName =\n          stepName\n          .replace(NUMBER_PATTERN, NUMBER_MATCHING_GROUP)\n          .replace(QUOTED_STRING_PATTERN, QUOTED_STRING_MATCHING_GROUP);\n      return parameterizedStepName;\n    }\n  };\n  return self;\n}\n\nStepDefinitionSnippetBuilder.JavaScriptSyntax = require('./step_definition_snippet_builder/javascript_syntax');\n\nmodule.exports = StepDefinitionSnippetBuilder;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/support_code/step_definition_snippet_builder/javascript_syntax.js":"function JavaScriptSyntax(interface) {\n  return {\n    build: function build (functionName, pattern, parameters, comment) {\n      var functionKeyword = 'function ';\n      if (interface === 'generator') {\n        functionKeyword += '*';\n      }\n\n      var implementation;\n      if (interface === 'callback') {\n        var callbackName = parameters[parameters.length - 1];\n        implementation = callbackName + '(null, \\'pending\\');';\n      } else {\n        parameters.pop();\n        implementation = 'return \\'pending\\';';\n      }\n\n      var snippet =\n        'this.' + functionName + '(' + pattern + ', ' + functionKeyword + '(' + parameters.join(', ') + ') {' + '\\n' +\n        '  // ' + comment + '\\n' +\n        '  ' + implementation + '\\n' +\n        '});';\n      return snippet;\n    }\n  };\n}\n\nmodule.exports = JavaScriptSyntax;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/tag_group_parser.js":"function TagGroupParser(tagGroupString) {\n  var self = {\n    parse: function parse() {\n      var splitTags = tagGroupString.split(TagGroupParser.TAG_SEPARATOR);\n      var trimmedTags = splitTags.map(function (tag) { return tag.trim(); });\n      return trimmedTags;\n    }\n  };\n  return self;\n}\n\nTagGroupParser.getTagGroupsFromStrings = function getTagGroupsFromStrings(tagGroupStrings) {\n  var Cucumber = require('../cucumber');\n\n  var tagGroups = tagGroupStrings.map(function (tagOptionValue) {\n    var tagGroupParser = Cucumber.TagGroupParser(tagOptionValue);\n    var tagGroup       = tagGroupParser.parse();\n    return tagGroup;\n  });\n  return tagGroups;\n};\n\nTagGroupParser.TAG_SEPARATOR = ',';\n\nmodule.exports = TagGroupParser;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/type.js":"var Type           = {};\nType.HashDataTable = require('./type/hash_data_table');\nType.String        = require('./type/string');\nmodule.exports     = Type;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/type/hash_data_table.js":"function HashDataTable(rawArray) {\n  var self = {\n    raw: function raw() {\n      var hashKeys        = self.getHashKeys();\n      var hashValueArrays = self.getHashValueArrays();\n      var hashes          = self.createHashesFromKeysAndValueArrays(hashKeys, hashValueArrays);\n      return hashes;\n    },\n\n    getHashKeys: function getHashKeys() {\n      return rawArray[0];\n    },\n\n    getHashValueArrays: function getHashValueArrays() {\n      var _rawArray = [].concat(rawArray);\n      _rawArray.shift();\n      return _rawArray;\n    },\n\n    createHashesFromKeysAndValueArrays: function createHashesFromKeysAndValueArrays(keys, valueArrays) {\n      var hashes = [];\n      valueArrays.forEach(function (values) {\n        var hash = self.createHashFromKeysAndValues(keys, values);\n        hashes.push(hash);\n      });\n      return hashes;\n    },\n\n    createHashFromKeysAndValues: function createHashFromKeysAndValues(keys, values) {\n      var hash = {};\n      var len  = keys.length;\n      for (var i = 0; i < len; i++) {\n        hash[keys[i]] = values[i];\n      }\n      return hash;\n    }\n  };\n  return self;\n}\n\nmodule.exports = HashDataTable;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/type/string.js":"if (!String.prototype.trim) {\n  String.prototype.trim = function () {\n    return this.replace(/^\\s+|\\s+$/g,'');\n  };\n}\n\nmodule.exports = String;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/util.js":"var Util       = {};\nUtil.Arguments = require('./util/arguments');\nUtil.asyncForEach = require('./util/async_for_each');\nUtil.Exception = require('./util/exception');\nUtil.RealTime  = require('./util/real_time');\nUtil.RegExp    = require('./util/reg_exp');\nUtil.run    = require('./util/run');\nUtil.String    = require('./util/string');\nUtil.Colors    = require('./util/colors');\nmodule.exports = Util;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/util/arguments.js":"function Arguments(argumentsObject) {\n  return Array.prototype.slice.call(argumentsObject);\n}\n\nmodule.exports = Arguments;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/util/async_for_each.js":"var asyncForEach = function asyncForEach(items, userFunction, callback) {\n  var itemsCopy = items.slice(0);\n\n  function iterate() {\n    if (itemsCopy.length > 0) {\n      var item = itemsCopy.shift();\n      userFunction(item, function () {\n        process.nextTick(iterate);\n      });\n    } else {\n      callback();\n    }\n  }\n\n  iterate();\n};\n\nmodule.exports = asyncForEach;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/util/exception.js":"/* jshint -W117 */\n\nvar Exception = {\n  registerUncaughtExceptionHandler: function registerUncaughtExceptionHandler(exceptionHandler) {\n    if (process.on) {\n      process.on('uncaughtException', exceptionHandler);\n    } else if (typeof(window) !== 'undefined') {\n      window.onerror = exceptionHandler;\n    }\n  },\n\n  unregisterUncaughtExceptionHandler: function unregisterUncaughtExceptionHandler(exceptionHandler) {\n    if (process.removeListener) {\n      process.removeListener('uncaughtException', exceptionHandler);\n    } else if (typeof(window) !== 'undefined') {\n      window.onerror = void(0);\n    }\n  }\n};\n\nmodule.exports = Exception;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/util/real_time.js":"var methods = {\n  Date: Date,\n  setTimeout: setTimeout.bind(global),\n  clearTimeout: clearTimeout.bind(global),\n  setInterval: setInterval.bind(global),\n  clearInterval: clearInterval.bind(global)\n};\n\nif (typeof setImmediate !== 'undefined') {\n  methods.setImmediate = setImmediate.bind(global);\n  methods.clearImmediate = clearImmediate.bind(global);\n}\n\nmodule.exports = methods;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/util/reg_exp.js":"var _RegExp = {\n  escapeString: function escapeString(string) {\n    var escaped = string.replace(_RegExp.ESCAPE_PATTERN, _RegExp.ESCAPE_REPLACEMENT);\n    return escaped;\n  }\n};\n\n_RegExp.ESCAPE_PATTERN     = /[-[\\]{}()*+?.\\\\^$|#\\n\\/]/g;\n_RegExp.ESCAPE_REPLACEMENT = '\\\\$&';\nmodule.exports = _RegExp;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/util/run.js":"var co = require('co');\nvar util = require('util');\nvar isGeneratorFn = require('is-generator').fn;\n\nfunction run(fn, thisArg, argsArray, timeoutInMilliseconds, callback) {\n  var Cucumber = require('../../cucumber');\n  var timeoutId;\n\n  function finish(error, result) {\n    Cucumber.Util.Exception.unregisterUncaughtExceptionHandler(finish);\n    if (timeoutId) {\n      Cucumber.Util.RealTime.clearTimeout(timeoutId);\n    }\n    if (error && !(error instanceof Error)) {\n      error = util.format(error);\n    }\n    callback(error, result);\n    callback = function() {};\n  }\n\n  argsArray.push(finish);\n\n  timeoutId = Cucumber.Util.RealTime.setTimeout(function(){\n    finish('function timed out after ' + timeoutInMilliseconds + ' milliseconds');\n  }, timeoutInMilliseconds);\n\n  Cucumber.Util.Exception.registerUncaughtExceptionHandler(finish);\n\n  var result;\n  try {\n    if (isGeneratorFn(fn)) {\n      result = co.wrap(fn).apply(thisArg, argsArray);\n    } else {\n      result = fn.apply(thisArg, argsArray);\n    }\n  } catch (error) {\n    return finish(error);\n  }\n\n  var callbackInterface = fn.length === argsArray.length;\n  var promiseInterface = result && typeof result.then === 'function';\n  if (callbackInterface && promiseInterface) {\n    finish('function accepts a callback and returns a promise');\n  } else if (promiseInterface) {\n    result.then(function(result){\n      finish(null, result);\n    }, function(error) {\n      finish(error || 'Promise rejected');\n    });\n  } else if (!callbackInterface) {\n    finish(null, result);\n  }\n}\n\nmodule.exports = run;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/util/string.js":"var _String = {\n  count: function count(hayStack, needle) {\n    var splitHayStack = hayStack.split(needle);\n    return splitHayStack.length - 1;\n  }\n};\nmodule.exports = _String;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/util/colors.js":"var colors = require('colors/safe');\n\nfunction Colors (useColors) {\n  colors.enabled = useColors;\n  return {\n    ambiguous: colors.red,\n    bold: colors.bold,\n    failed: colors.red,\n    location: colors.grey,\n    passed: colors.green,\n    pending: colors.yellow,\n    skipped: colors.cyan,\n    tag: colors.cyan,\n    undefined: colors.yellow\n  };\n}\n\nmodule.exports = Colors;\n","/home/travis/build/npmtest/node-npmtest-cucumber/cucumber/lib/cucumber/volatile_configuration.js":"function VolatileConfiguration(features, supportCodeInitializer, options) {\n  var Cucumber = require('../cucumber');\n  var supportCodeLibrary = Cucumber.SupportCode.Library(supportCodeInitializer);\n\n  options = options || {};\n  var strictMode = !!options.strict;\n  var tagGroupStrings = options.tags || [];\n  var backtrace = !!options.backtrace;\n  var worldParameters = options.worldParameters || {};\n\n  var self = {\n    isStrictRequested: function isStrictRequested() {\n      return strictMode;\n    },\n\n    getFeatureSources: function getFeatureSources() {\n      if (features.replace) { // single source\n        var featureNameSourcePair = [VolatileConfiguration.FEATURE_SOURCE_NAME, features];\n        return [featureNameSourcePair];\n      } else { // multiple features\n        return features;\n      }\n    },\n\n    getAstFilter: function getAstFilter() {\n      var tagRules = self.getTagAstFilterRules();\n      var astFilter = Cucumber.Ast.Filter(tagRules);\n      return astFilter;\n    },\n\n    getSupportCodeLibrary: function getSupportCodeLibrary() {\n      return supportCodeLibrary;\n    },\n\n    getTagAstFilterRules: function getTagAstFilterRules() {\n      var rules = [];\n      tagGroupStrings.forEach(function (tagGroupString) {\n        var rule = self.buildAstFilterRuleFromTagGroupString(tagGroupString);\n        rules.push(rule);\n      });\n      return rules;\n    },\n\n    buildAstFilterRuleFromTagGroupString: function buildAstFilterRuleFromTagGroupString(tagGroupString) {\n      var tagGroupParser = Cucumber.TagGroupParser(tagGroupString);\n      var tagGroup       = tagGroupParser.parse();\n      var rule           = Cucumber.Ast.Filter.AnyOfTagsRule(tagGroup);\n      return rule;\n    },\n\n    shouldFilterStackTraces: function shouldFilterStackTraces() {\n      return !backtrace;\n    },\n\n    getWorldParameters: function getWorldParameters() {\n      return worldParameters;\n    }\n  };\n  return self;\n}\n\nVolatileConfiguration.FEATURE_SOURCE_NAME = '(feature)';\n\nmodule.exports = VolatileConfiguration;\n"}